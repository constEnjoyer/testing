import React, { useState, useEffect, useCallback } from 'react';
import Image from 'next/image';
import { useTranslations, useLocale } from 'next-intl';
import styles from './ProfileModal.module.css';

interface ProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
  telegramId: string;
  photoUrl?: string;
  firstName?: string;
  lastName?: string;
}

interface ReferralInfo {
  referralCode: string;
  referrals: {
    userId: string;        // referalId –∏–∑ –±–∞–∑—ã
    username: string;      // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photoUrl: string;      // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    hasPlayedRoomA: boolean; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Å roomAPlayed
    hasPlayedRoomB: boolean; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Å roomBPlayed
    isValid: boolean;      // –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    roomAPlayedAt?: Date;  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã
    roomBPlayedAt?: Date;  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã
    validatedAt?: Date;    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  }[];
  totalValidReferrals: number;
  bonusesReceived: number;
  pendingBonuses: number;
  channelSubscribed: boolean;
}

export const ProfileModal: React.FC<ProfileModalProps> = ({
  isOpen,
  onClose,
  telegramId,
  photoUrl,
  firstName = '',
  lastName = '',
}) => {
  const t = useTranslations('Profile');
  const locale = useLocale();
  const [referralInfo, setReferralInfo] = useState<ReferralInfo | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [copiedToClipboard, setCopiedToClipboard] = useState(false);
  const [checkingSubscription, setCheckingSubscription] = useState(false);

  // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  const fetchReferralInfo = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch(`/api/referral/info?telegramId=${telegramId}`);
      
      if (!response.ok) {
        throw new Error(`Error fetching referral info: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Unknown error occurred');
      }
      
      setReferralInfo(data.data);
    } catch (err: any) {
      console.error('Failed to fetch referral info:', err);
      setError(err.message || 'Failed to load referral information');
    } finally {
      setLoading(false);
    }
  }, [telegramId]);

  // –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen && telegramId) {
      fetchReferralInfo();
    }
  }, [isOpen, telegramId, fetchReferralInfo]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ 2 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (copiedToClipboard) {
      const timer = setTimeout(() => {
        setCopiedToClipboard(false);
      }, 2000);
      
      return () => clearTimeout(timer);
    }
  }, [copiedToClipboard]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞
  const claimBonus = async () => {
    if (!referralInfo?.pendingBonuses) return;
    
    try {
      setLoading(true);
      
      const response = await fetch('/api/referral/claim-bonus', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegramId }),
      });
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to claim bonus');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
      fetchReferralInfo();
    } catch (err: any) {
      console.error('Failed to claim bonus:', err);
      setError(err.message || 'Failed to claim bonus');
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  const copyReferralLink = () => {
    if (!referralInfo?.referralCode) return;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const messageText = locale === 'en' 
      ? `‚òØÔ∏è Find your CHANCE in harmony with fellow Seekers!\n` +
        `üé≤ Test your destiny and win on airdrop $1,000,000\n` +
        `üîÆ Join TONOTCHANCE right now:\n` +
        `tg://resolve?domain=tonotchance_bot&startapp=${referralInfo.referralCode}`
      : `‚òØÔ∏è –û–±—Ä–µ—Ç–∏ —Å–≤–æ–π –®–ê–ù–° –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –ò—Å–∫–∞—Ç–µ–ª—è–º–∏!\n` +
        `üé≤ –ò—Å–ø—ã—Ç–∞–π —Å—É–¥—å–±—É –∏ –≤—ã–∏–≥—Ä–∞–π –Ω–∞ —ç–∏—Ä–¥—Ä–æ–ø–µ 1.000.000$\n` +
        `üîÆ –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ TONOTCHANCE –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n` +
        `tg://resolve?domain=tonotchance_bot&startapp=${referralInfo.referralCode}`;

    console.log('[ProfileModal] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', {
      code: referralInfo.referralCode,
      message: messageText,
      language: locale
    });
    
    navigator.clipboard.writeText(messageText)
      .then(() => {
        setCopiedToClipboard(true);
        console.log('[ProfileModal] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
      })
      .catch(err => {
        console.error('[ProfileModal] –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', err);
        setError('Failed to copy to clipboard');
      });
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ UI —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
  const getReferralLink = () => {
    if (!referralInfo?.referralCode) return '';
    const prefix = locale === 'en' ? 'TonotChance | Seekers' : 'TonotChance | –ò—Å–∫–∞—Ç–µ–ª–∏';
    return `‚òØÔ∏è ${prefix} | tg://resolve?domain=tonotchance_bot&startapp=${referralInfo.referralCode}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞ Telegram –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const openTelegramChannel = async () => {
    window.open('https://t.me/TONOTCHANCE', '_blank');
    
    // –î–æ–±–∞–≤–ª—è—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    setTimeout(async () => {
      try {
        setCheckingSubscription(true);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ä–∞–∑—É —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å
        const response = await fetch('/api/channel/check-subscription', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ telegramId }),
        });
        
        if (!response.ok) {
          throw new Error(`Error updating subscription: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (!data.success) {
          throw new Error(data.error || 'Unknown error occurred');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–æ—á–∫—É
        setReferralInfo(prev => {
          if (!prev) return prev;
          return {
            ...prev,
            channelSubscribed: true
          };
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        await fetchReferralInfo();
      } catch (err: any) {
        console.error('Failed to update channel subscription:', err);
        setError(err.message || 'Failed to update channel subscription');
      } finally {
        setCheckingSubscription(false);
      }
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  };

  // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
        <div className={styles.modalHeader}>
          <h3>{t('profile')}</h3>
          <button className={styles.closeButton} onClick={onClose}>√ó</button>
        </div>
        
        {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className={styles.userProfile}>
          <div className={styles.userAvatar}>
            {photoUrl ? (
              <Image
                src={photoUrl}
                alt={firstName}
                width={64}
                height={64}
                className={styles.avatarImage}
              />
            ) : (
              <div className={styles.defaultAvatar}>
                <span>{firstName?.charAt(0) || '?'}</span>
              </div>
            )}
          </div>
          <div className={styles.userName}>
            {firstName} {lastName}
          </div>
        </div>
        
        {loading ? (
          <div className={styles.loadingSpinner}>
            <div className={styles.spinner}></div>
          </div>
        ) : error ? (
          <div className={styles.errorMessage}>
            {error}
            <button 
              className={styles.retryButton} 
              onClick={fetchReferralInfo}
            >
              {t('retry')}
            </button>
          </div>
        ) : referralInfo ? (
          <>
            {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª */}
            <div className={styles.channelSection}>
              <h3>{t('channelSubscription')}</h3>
              <div className={styles.channelContainer}>
                <div className={styles.channelStatus}>
                  <div className={`${styles.statusDot} ${referralInfo.channelSubscribed ? styles.completed : ''}`}>
                    <span>‚úì</span>
                  </div>
                  <span className={styles.channelName}>
                    {referralInfo.channelSubscribed ? t('subscribed') : t('notSubscribed')}
                  </span>
                </div>
                <button 
                  className={styles.channelButton}
                  onClick={referralInfo.channelSubscribed ? fetchReferralInfo : openTelegramChannel}
                  disabled={checkingSubscription}
                >
                  {checkingSubscription 
                    ? t('checking') 
                    : referralInfo.channelSubscribed 
                      ? t('checkSubscription') 
                      : t('subscribeChannel')}
                </button>
              </div>
            </div>
            
            {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ */}
            <div className={styles.referralSection}>
              <h3>{t('yourReferralLink')}</h3>
              <div className={styles.referralLinkContainer}>
                <input 
                  type="text" 
                  readOnly 
                  value={getReferralLink()}
                  className={styles.referralLink}
                />
                <button 
                  className={styles.copyButton}
                  onClick={copyReferralLink}
                >
                  {copiedToClipboard ? t('copied') : t('copy')}
                </button>
              </div>
            </div>
            
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ */}
            <div className={styles.statsSection}>
              <div className={styles.statItem}>
                <span className={styles.statLabel}>{t('totalReferrals')}</span>
                <span className={styles.statValue}>{referralInfo.referrals.length}</span>
              </div>
              <div className={styles.statItem}>
                <span className={styles.statLabel}>{t('validReferrals')}</span>
                <span className={styles.statValue}>{referralInfo.totalValidReferrals}</span>
              </div>
              <div className={styles.statItem}>
                <span className={styles.statLabel}>{t('bonusesReceived')}</span>
                <span className={styles.statValue}>{referralInfo.bonusesReceived}</span>
              </div>
            </div>
            
            {/* –ë–æ–Ω—É—Å–Ω—ã–µ –±–∏–ª–µ—Ç—ã */}
            {referralInfo.pendingBonuses > 0 && (
              <div className={styles.bonusSection}>
                <div className={styles.pendingBonus}>
                  <span>{t('pendingBonuses', { count: referralInfo.pendingBonuses })}</span>
                  <button 
                    className={styles.claimButton}
                    onClick={claimBonus}
                    disabled={loading}
                  >
                    {t('claimBonus')}
                  </button>
                </div>
              </div>
            )}
            
            {/* –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ */}
            {referralInfo.referrals.length > 0 && (
              <div className={styles.referralsListSection}>
                <h3>{t('yourReferrals')}</h3>
                <div className={styles.referralsList}>
                  {referralInfo.referrals.map((referral) => (
                    <div 
                      key={referral.userId} 
                      className={`${styles.referralItem} ${referral.isValid ? styles.validReferral : ''}`}
                    >
                      <div className={styles.referralAvatar}>
                        {referral.photoUrl ? (
                          <Image
                            src={referral.photoUrl}
                            alt={referral.username || 'User'}
                            width={32}
                            height={32}
                          />
                        ) : (
                          <div className={styles.smallDefaultAvatar}>
                            <span>{(referral.username || '?').charAt(0)}</span>
                          </div>
                        )}
                      </div>
                      <div className={styles.referralName}>
                        {referral.username || t('anonymousUser')}
                      </div>
                      <div className={styles.referralStatus}>
                        <div className={styles.statusIndicators}>
                          <div 
                            className={`${styles.statusDot} ${referral.hasPlayedRoomA ? styles.completed : ''}`}
                            title={referral.roomAPlayedAt ? new Date(referral.roomAPlayedAt).toLocaleString() : t('roomANotPlayed')}
                          >
                            A
                          </div>
                          <div 
                            className={`${styles.statusDot} ${referral.hasPlayedRoomB ? styles.completed : ''}`}
                            title={referral.roomBPlayedAt ? new Date(referral.roomBPlayedAt).toLocaleString() : t('roomBNotPlayed')}
                          >
                            B
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞ */}
            <div className={styles.progressSection}>
              <h3>{t('nextBonusProgress')}</h3>
              <div className={styles.progressBar}>
                <div 
                  className={styles.progressFill} 
                  style={{ width: `${(referralInfo.totalValidReferrals % 10) * 10}%` }}
                ></div>
              </div>
              <div className={styles.progressText}>
                {t('progressText', { 
                  current: referralInfo.totalValidReferrals % 10, 
                  required: 10 
                })}
              </div>
            </div>
          </>
        ) : (
          <div className={styles.noData}>
            {t('noReferralData')}
          </div>
        )}
      </div>
    </div>
  );
};

export default ProfileModal; 