import React, { useEffect, useContext, FC, useState } from 'react';
import { useTranslations } from 'next-intl';
import styles from './styles/ResultModalX10.module.css';
import Image from 'next/image';

interface ResultModalX10Props {
  position: number;          // –ú–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞ (1-10)
  prize: number | 'tonot-chance';  // –ü—Ä–∏–∑ (–¢–û–ù–û–¢ –∏–ª–∏ TonotChance –±–∏–ª–µ—Ç)
  onClose: () => void;      // –ö–æ–ª–±—ç–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
  onBalanceUpdate?: () => void; // –ö–æ–ª–±—ç–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
}

const ResultModalX10: FC<ResultModalX10Props> = ({ position, prize, onClose, onBalanceUpdate }) => {
  const t = useTranslations('i18n');
  const gameT = useTranslations('game');
  
  const [isVisible, setIsVisible] = useState(true); // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  const [imagesLoaded, setImagesLoaded] = useState(false);
  const [balanceUpdated, setBalanceUpdated] = useState(false); // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

  const isWinner = position > 0 && position <= 3;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (!balanceUpdated && onBalanceUpdate) {
      console.log('[ResultModalX10] üí∞ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
      onBalanceUpdate();
      setBalanceUpdated(true);
    }
  }, [onBalanceUpdate, balanceUpdated]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageLoad = () => {
    console.log('[ResultModalX10] üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    setImagesLoaded(true);
  };

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
  const getResultMessage = () => {
    if (!isWinner) {
      return gameT('x10_consolation');
    }
    
    switch (position) {
      case 1:
        return gameT('x10_win_first');
      case 2:
        return gameT('x10_win_second');
      case 3:
        return gameT('x10_win_third');
      default:
        return gameT('x10_consolation');
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–∑–∞
  const getPrizeText = () => {
    if (!isWinner) {
      return gameT('x10_consolation_prize');
    }
    
    if (typeof prize === 'number') {
      return `${prize} TONOT`;
    }
    return prize === 'tonot-chance' ? gameT('x10_consolation_prize') : String(prize);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
  const handleClose = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (!isVisible) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
    
    setIsVisible(false);
    console.log('[ResultModalX10] ‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
    onClose();
  };

  return (
    <div 
      className={`${styles.overlay} ${isVisible ? styles.visible : ''}`} 
      onClick={handleClose}
    >
      <div 
        className={`${styles.modal} ${isWinner ? styles.winnerModal : styles.loserModal}`}
        onClick={e => e.stopPropagation()}
      >
        <div className={styles.content}>
          <div className={styles.imageWrapper}>
            <Image
              src={isWinner ? '/images/tonot.png' : '/images/tonot-chance.png'}
              alt={isWinner ? 'TONOT' : 'TonotChance'}
              width={200}
              height={200}
              priority
              onLoad={handleImageLoad}
              className={styles.resultImage}
            />
          </div>
          <div className={styles.text}>
            {getResultMessage()}
          </div>
          <div className={styles.prizeText}>
            {getPrizeText()}
          </div>
        </div>
        <button 
          onClick={handleClose} 
          className={styles.button}
          disabled={!isVisible} // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        >
          {t('close')}
        </button>
      </div>
    </div>
  );
};

export default ResultModalX10; 