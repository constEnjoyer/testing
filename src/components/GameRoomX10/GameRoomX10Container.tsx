'use client';

import React, { useCallback, useContext, useEffect, useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { SoundContext } from '@/components/Root/Root';
import { useGameSound } from '@/contexts/GameSoundContext';
import { useTelegramUser } from '@/hooks/useTelegramUser';
import { useSocketX10 } from '@/hooks/useSocketX10';
import { useGameStateX10 } from '@/hooks/useGameStateX10';
import { useX10Room } from '@/contexts/X10RoomContext';
import { ScreenType } from '@/components/GameMenu/components/BottomNavigation';
import { TicketPurchaseModal } from '@/components/GameMenu/components/TicketPurchaseModal';
import { ExchangeModal } from '@/components/ExchangeModal/ExchangeModal';
import { HistoryModal } from '@/components/HistoryModal/HistoryModal';
import { GameTransition } from '@/components/GameTransition/GameTransition';
import { useTonAddress, useTonConnectUI } from '@tonconnect/ui-react';
import { X10Player, X10Winner, X10Match as BaseX10Match } from '@/@types/x10';
import type { GamePhase } from '@/contexts/X10RoomContext';
import {
  WaitingOverlayX10,
  CountdownOverlayX10,
  ResultModalX10,
  GameControlsX10,
  GameHeaderX10,
  BottomNavigationX10,
  MergingAnimationX10,
  YinYangWheel,
  SoundButton
} from './components';
import styles from './styles/GameRoomX10Container.module.css';
import { toast } from 'react-hot-toast';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞–π–º–∏–Ω–≥–æ–≤
const GAME_TIMINGS = {
  PREPARING: 5000,    // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
  MERGING: 7500,      // 7.5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é —Å–ª–∏—è–Ω–∏—è
  WHEEL_APPEAR: 4000, // 4 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞
  WHEEL_SPIN: 7000,   // 7 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—Ä–∞—â–µ–Ω–∏–µ
  WHEEL_DISAPPEAR: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
  RESULT_DELAY: 1000  // 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
} as const;

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–∏–ø –±–∞–ª–∞–Ω—Å–∞
interface Balance {
  chance: number;
  tonotChance: number;
  tonot: number;
  ton: number;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∞—Ç—á–∞
const MATCH_STATUS = {
  COMPLETED: 'completed' as const,
  WAITING: 'waiting' as const,
  PLAYING: 'playing' as const
};

interface ExtendedX10Match extends BaseX10Match {
  winners: X10Winner[];
  phase: GamePhase;
  matchId: string;
}

export const GameRoomX10Container: React.FC = () => {
  const router = useRouter();
  const t = useTranslations('game');
  const i18n = useTranslations('i18n');
  const { telegramUser } = useTelegramUser();
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–∫–µ—Ç–∞
  const { 
    isConnected,
    joinX10Room
  } = useSocketX10(false);
  
  const { 
    gameState,
    isWaiting,
    findPlayers,
    cancelWaiting,
    resetGame,
    error: gameError,
    isLoading,
    handleSocketEvents,
    updateUserBalance,
    updateGameState,
    completeGame
  } = useGameStateX10(joinX10Room);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
  const [balance, setBalance] = useState<Balance>({
    chance: 0,
    tonotChance: 0,
    tonot: 0,
    ton: 0
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [showTicketsModal, setShowTicketsModal] = useState(false);
  const [showExchangeModal, setShowExchangeModal] = useState(false);
  const [showHistoryModal, setShowHistoryModal] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –∑–≤—É–∫–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
  const { playClickSound, isMuted } = useContext(SoundContext);
  const { playGameSound, stopGameSound } = useGameSound();

  const [showTransition, setShowTransition] = useState(false);
  const [showResultModal, setShowResultModal] = useState(false);
  const [resultShown, setResultShown] = useState(false);

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ö—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TON
  const tonAddress = useTonAddress();
  const [tonConnectUI] = useTonConnectUI();
  const isWalletConnected = tonAddress !== null;

  // –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è sendTransaction
  const sendTransaction = useCallback(async (amount: number, toAddress: string) => {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TON –≤ –Ω–∞–Ω–æ–¢–û–ù—ã (1 TON = 1e9 –Ω–∞–Ω–æ–¢–û–ù–æ–≤)
    const amountInNano = Math.floor(amount * 1e9).toString();
    
    const result = await tonConnectUI.sendTransaction({
      validUntil: Math.floor(Date.now() / 1000) + 600, // 10 –º–∏–Ω—É—Ç
      messages: [
        {
          amount: amountInNano,
          address: toAddress
        }
      ]
    });
    return { boc: result.boc };
  }, [tonConnectUI]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
  useEffect(() => {
    const handlePhaseSound = async () => {
      if (isMuted) return;

      switch (gameState.phase) {
        case 'merging':
          console.log('[GameRoomX10] üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤ —Å–ª–∏—è–Ω–∏—è');
          const MERGE_DURATION = 750;
          
          for (let i = 0; i < 10; i++) {
            setTimeout(() => {
              if (!isMuted) {
                playGameSound('merge');
              }
            }, i * MERGE_DURATION);
          }
          break;

        case 'wheel_appear':
          console.log('[GameRoomX10] üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞');
          await playGameSound('wheel_appear');
          break;

        case 'wheel_spin':
          console.log('[GameRoomX10] üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è');
          await playGameSound('x10_wheel_spin');
          break;

        case 'wheel_disappear':
          console.log('[GameRoomX10] üé≤ –§–∞–∑–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞');
          await playGameSound('wheel_disappear');
          break;

        case 'result':
          if (!showResultModal && !resultShown) {
            const winners = gameState.winners || [];
            const isWinner = winners.find(w => w.telegramId === telegramUser?.id);
            console.log('[GameRoomX10] üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', isWinner ? '–ø–æ–±–µ–¥–∞' : '–ø—Ä–æ–∏–≥—Ä—ã—à');
            await playGameSound(isWinner ? 'win' : 'lose');
            
            console.log('[GameRoomX10] üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
            setShowResultModal(true);
            setResultShown(true);
          }
          break;

        case 'completed':
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –∑–≤—É–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
          stopGameSound('x10_wheel_spin');
          break;
      }
    };

    handlePhaseSound();
  }, [gameState.phase, gameState.winners, telegramUser?.id, showResultModal, resultShown, playGameSound, stopGameSound, isMuted]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ API - —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const updateBalance = useCallback(async () => {
    try {
      if (!telegramUser?.id) {
        console.warn('[GameRoomX10] ‚ö†Ô∏è –ù–µ—Ç telegramUser.id, –Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        return;
      }
      
      const data = await updateUserBalance();
      
      if (data) {
        const apiBalance = {
          chance: Number(data.tickets || 0),
          tonotChance: Number(data.tonotChanceTickets || 0),
          tonot: Number(data.balance || 0),
          ton: Number(data.tonBalance || 0)
        };
        
        setBalance(apiBalance);
        console.log('[GameRoomX10] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', apiBalance);
      }
    } catch (error) {
      console.error('[GameRoomX10] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }, [telegramUser?.id, updateUserBalance]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (!telegramUser?.id) return;
    updateBalance();
  }, [telegramUser?.id, updateBalance]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  useEffect(() => {
    if (!telegramUser?.id) return;
    
    const balanceInterval = setInterval(() => {
      updateBalance();
    }, 15000); // –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    
    return () => clearInterval(balanceInterval);
  }, [telegramUser?.id, updateBalance]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
  const handleStartGame = async () => {
    if (balance?.chance <= 0) {
      console.log('[X10] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
      setShowTicketsModal(true);
      return;
    }

    try {
      await findPlayers(1);
    } catch (error) {
      console.error('[X10] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã');
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
  const handleCancelSearch = async () => {
    try {
      playClickSound();
      await cancelWaiting();
    } catch (error) {
      console.error('[X10] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞');
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const handleCloseResultModal = useCallback(() => {
    console.log('[GameRoomX10Container] üéÆ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    
    setShowResultModal(false);
    setResultShown(false);
    
    // –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    updateGameState({ phase: 'idle' });
    updateBalance();
  }, [updateGameState, updateBalance]);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∫–µ—Ç-—Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ —Ö—É–∫
  useEffect(() => {
    // –¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∫–µ—Ç–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ö—É–∫–µ
    if (isConnected) {
      handleSocketEvents(telegramUser?.id);
  
      // –ö–æ–ª–ª–±—ç–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const onResult = () => {
        setShowResultModal(true);
      };
  
      return () => {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      };
    }
  }, [isConnected, handleSocketEvents, telegramUser?.id]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const handleCloseTicketsModal = () => {
    setShowTicketsModal(false);
    updateBalance();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const closeAllModals = useCallback(() => {
    setShowTicketsModal(false);
    setShowExchangeModal(false);
    setShowHistoryModal(false);
  }, []);

  // –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
  const handleScreenChange = useCallback((screen: ScreenType) => {
    closeAllModals();
    
    switch (screen) {
      case ScreenType.TICKETS:
        setShowTicketsModal(true);
        break;
      case ScreenType.EXCHANGE:
        setShowExchangeModal(true);
        break;
      case ScreenType.HISTORY:
        setShowHistoryModal(true);
        break;
      case ScreenType.HOME:
        if (!showTransition) {
          playClickSound();
          setShowTransition(true);
        }
        break;
    }
  }, [closeAllModals, playClickSound, showTransition]);

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ—á–∏—Å—Ç–∫–∏ –∑–≤—É–∫–æ–≤
  useEffect(() => {
    if (gameState.phase === 'idle') {
      console.log('[GameRoomX10] –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    }
  }, [gameState.phase]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
  const handleCountdownComplete = () => {
    // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è gameState, –Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç —ç—Ç–æ—Ç –∫–æ–ª–ª–±—ç–∫
    console.log('[GameRoomX10] –ó–∞–≤–µ—Ä—à–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç');
  };

  // –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ñ–∞–∑–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç
    if (gameState.phase === 'result' && (!gameState.winners || gameState.winners.length === 0) && gameState.matchId) {
      console.log('[X10] ‚ö†Ô∏è –í —Ñ–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ - –ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–Ω–æ–≤–∞');
      
      // –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ API
      const fetchResultsRetry = async () => {
        try {
          const response = await fetch('/api/match/x10/complete', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              matchId: gameState.matchId,
              telegramId: telegramUser?.id
            }),
          });
          
          if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('[X10] üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å:', data);
          
          if (data.success && data.winners && data.winners.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            updateGameState({
              winners: data.winners || []
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            setShowResultModal(true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            updateBalance();
          }
        } catch (error) {
          console.error('[X10] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å:', error);
        }
      };
      
      fetchResultsRetry();
    }
  }, [gameState.phase, gameState.winners, gameState.matchId, telegramUser?.id, updateGameState, updateBalance]);

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handlePhaseSound
  // ... existing code ...

  return (
    <div 
      className={styles.container}
    >
      {showTransition && (
        <GameTransition 
          direction="toMenu"
          onComplete={() => {
            setShowTransition(false);
            router.push('/');
          }}
        />
      )}
      <GameHeaderX10 
        balance={{
          chance: balance.chance,
          tonotChance: balance.tonotChance,
          tonot: balance.tonot,
          ton: balance.ton
        }}
      />

      {/* –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–≤—É–∫–∞ */}
      <div className={styles.soundButtonContainer}>
        <SoundButton />
      </div>

      <div className={styles.gameContent}>
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –æ–∂–∏–¥–∞–Ω–∏—è */}
        {gameState.phase === 'waiting' && (
          <WaitingOverlayX10 
            message={t('waiting_for_players')}
            onClose={handleCancelSearch}
          />
        )}

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç */}
        {gameState.phase === 'preparing' && (
          <CountdownOverlayX10 
            onComplete={handleCountdownComplete}
          />
        )}

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–ª–∏—è–Ω–∏—è */}
        {gameState.phase === 'merging' && (
          <MergingAnimationX10 
            onComplete={() => {}} 
          />
        )}

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ */}
        {(gameState.phase === 'wheel_appear' || 
          gameState.phase === 'wheel_spin' || 
          gameState.phase === 'wheel_disappear') && (
          <YinYangWheel 
            phase={gameState.phase}
          />
        )}

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –ò–°–ü–†–ê–í–õ–Ø–ï–ú –£–°–õ–û–í–ò–ï */}
        {(gameState.phase === 'result' || showResultModal) && (
          <ResultModalX10
            position={(() => {
              // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
              const winners = gameState.winners || [];
              
              // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              console.log('[GameRoomX10Container] üèÜ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏:', {
                winners,
                telegramId: telegramUser?.id,
                winnerFound: winners.some(w => w?.telegramId === telegramUser?.id)
              });
              
              // –ü–æ–∏—Å–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
              const winner = winners.find(w => w && typeof w === 'object' && w.telegramId === telegramUser?.id);
              
              if (winner?.position && winner.position <= 3) {
                return winner.position;
              }
              return 0;
            })()}
            prize={(() => {
              // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
              const winners = gameState.winners || [];
              
              // –ü–æ–∏—Å–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
              const winner = winners.find(w => w && typeof w === 'object' && w.telegramId === telegramUser?.id);
              
              if (winner?.position && winner.position <= 3) {
                return winner.prize;
              }
              return 'tonot-chance';
            })()}
            onClose={handleCloseResultModal}
            onBalanceUpdate={updateBalance}
          />
        )}

        {/* –í–µ—Ä—Ö–Ω–∏–µ –±–∏–ª–µ—Ç—ã (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ) */}
        <div className={styles.topTickets}>
          {[1, 2, 3].map((position) => (
            <GameControlsX10
              key={`top-ticket-${position}`}
              isLoading={isLoading}
              gameStatus={MATCH_STATUS.WAITING}
              position={position}
              isBottom={false}
              isActive={gameState.phase === 'idle'}
              isMerging={gameState.phase === 'merging'}
              availableTickets={balance.chance}
              onJoinRoom={handleStartGame}
            />
          ))}
        </div>

        {/* –õ–µ–≤—ã–µ –±–∏–ª–µ—Ç—ã (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ) */}
        <div className={styles.leftTickets}>
          {[4, 5, 6].map((position) => (
            <GameControlsX10
              key={`left-ticket-${position}`}
              isLoading={isLoading}
              gameStatus={MATCH_STATUS.WAITING}
              position={position}
              isBottom={false}
              isActive={gameState.phase === 'idle'}
              isMerging={gameState.phase === 'merging'}
              availableTickets={balance.chance}
              onJoinRoom={handleStartGame}
            />
          ))}
        </div>

        {/* –ü—Ä–∞–≤—ã–µ –±–∏–ª–µ—Ç—ã (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ) */}
        <div className={styles.rightTickets}>
          {[7, 8, 9].map((position) => (
            <GameControlsX10
              key={`right-ticket-${position}`}
              isLoading={isLoading}
              gameStatus={MATCH_STATUS.WAITING}
              position={position}
              isBottom={false}
              isActive={gameState.phase === 'idle'}
              isMerging={gameState.phase === 'merging'}
              availableTickets={balance.chance}
              onJoinRoom={handleStartGame}
            />
          ))}
        </div>

        {/* –ù–∏–∂–Ω–∏–π –±–∏–ª–µ—Ç */}
        <div className={styles.bottomTicket}>
          <GameControlsX10
            onJoinRoom={handleStartGame}
            isLoading={isLoading}
            gameStatus={MATCH_STATUS.WAITING}
            position={10}
            isBottom={true}
            isActive={gameState.phase === 'idle'}
            isMerging={gameState.phase === 'merging'}
            availableTickets={balance.chance}
          />
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {showTicketsModal && (
        <div className={styles.modalContainer}>
          <TicketPurchaseModal
            isOpen={showTicketsModal}
            onClose={handleCloseTicketsModal}
            telegramId={telegramUser?.id}
            walletAddress={tonAddress ?? undefined}
            onPurchaseSuccess={updateBalance}
            connected={isWalletConnected}
            sendTransaction={sendTransaction}
          />
        </div>
      )}

      {showExchangeModal && (
        <div className={styles.modalContainer}>
          <ExchangeModal
            open={showExchangeModal}
            onClose={() => setShowExchangeModal(false)}
            balance={balance}
            userId={telegramUser?.id || 0}
            onSuccess={updateBalance}
          />
        </div>
      )}

      {showHistoryModal && (
        <div className={styles.modalContainer}>
          <HistoryModal
            open={showHistoryModal}
            onClose={() => setShowHistoryModal(false)}
            userId={telegramUser?.id || 0}
          />
        </div>
      )}

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className={styles.bottomNavigationWrapper}>
        <BottomNavigationX10
          activeScreen={ScreenType.GAME_ROOM}
          onNavigate={handleScreenChange}
          useDirectHomeNavigation={true}
        />
      </div>
    </div>
  );
}; 