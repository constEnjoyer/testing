'use client';

import React, { useState, useEffect, useCallback, useContext, useRef, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { useSignal, initData } from '@telegram-apps/sdk-react';
import { useTonAddress, useTonConnectUI } from '@tonconnect/ui-react';

// –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
import { 
  GameHeader, 
  YinYangWheel, 
  BottomNavigation, 
  WaitingOverlay,
  CountdownOverlay,
  ResultModal,
  GameControls,
  ChanceOverlay 
} from './components';
import { ScreenType } from './components/BottomNavigation';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
import { 
  useGameState, 
  type GameState
} from '@/hooks/useGameState';
import { 
  GamePhase, 
  GameStatus, 
  type GameResult,
  type Match as GameMatch 
} from '@/@types/game';
import { useSocket } from '@/hooks/useSocket';
import { useStorage, STORAGE_KEYS } from '@/hooks/useStorage';
import { ExchangeModal } from '@/components/ExchangeModal/ExchangeModal';
import { TicketPurchaseModal } from '@/components/GameMenu/components/TicketPurchaseModal';
import { HistoryModal } from '@/components/HistoryModal/HistoryModal';
import { useUser } from '@/contexts/UserContext';
import { useTelegramUser } from '@/hooks/useTelegramUser';
import { SoundContext } from '@/components/Root/Root';
import { GameTransition } from '@/components/GameTransition/GameTransition';
import styles from './styles/GameRoomContainer.module.css';
import { gameApi } from '@/utils/api';
import { useTonConnect } from '@/hooks/useTonConnect';

// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
interface Balance {
  chance: number;
  tonotChance: number;
  tonot: number;
  ton: number;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
interface ModalState {
  tickets: boolean;
  exchange: boolean;
  history: boolean;
  menuTransition: boolean;
  reset: boolean;
  resetGame: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–≥–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
interface GameRoomSavedState {
  waitingCancelled?: boolean;
  isWheelSpinning?: boolean;
}

/**
 * GameRoomContainer - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
 * 
 * –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
 * - –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
 */
const GameRoomContainer: React.FC = () => {
  const router = useRouter();
  const i18n = useTranslations('i18n');
  const gameT = useTranslations('game');
  const menuT = useTranslations('menu');
  
  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ
  const hasUnlockedAudioRef = useRef<boolean>(false);
  
  // –ó–≤—É–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Root
  const { 
    playClickSound, 
    playGameEffect, 
    cleanupSounds,
    toggleMute,
    isMuted 
  } = useContext(SoundContext);
  
  const [activeScreen, setActiveScreen] = useState<ScreenType>(ScreenType.GAME_ROOM);
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { user, updateBalance, fetchUserData } = useUser();
  const { telegramUser } = useTelegramUser();
  const { isConnected, address, sendTransaction } = useTonConnect();
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
  const [balance, setBalance] = useState<Balance>({
    chance: 0,
    tonotChance: 0,
    tonot: 0,
    ton: 0
  });
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const { isConnected: socketIsConnected, on, emit } = useSocket(true); // –≤–∫–ª—é—á–∞–µ–º autoConnect
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('[GameRoomContainer] üîç –ü–û–î–†–û–ë–ù–´–ï –î–ê–ù–ù–´–ï:', {
    'balance.chance': balance?.chance,
    'typeof balance.chance': typeof balance?.chance
  });
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useGameState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
  const { 
    gameState, 
    findOpponent,
    cancelWaiting,
    completeGame,
    resetGame: resetGameState,
    error: gameError,
    setOpponent,
    updateGameState
  } = useGameState();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const currentPhase = gameState.phase;
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–∞–ª–æ–∫ –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
  const [modalState, setModalState] = useState<ModalState>({
    tickets: false,
    exchange: false,
    history: false,
    menuTransition: false,
    reset: false,
    resetGame: false
  });
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const { 
    value: savedGameRoomState, 
    setValue: setSavedGameRoomState 
  } = useStorage<GameRoomSavedState>(STORAGE_KEYS.GAME_ROOM_STATE);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ö—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TON
  const tonAddress = useTonAddress();
  const [tonConnectUI] = useTonConnectUI();
  const isWalletConnected = tonAddress !== null;

  // –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON
  const tonSendTransaction = useCallback(async (amount: number, toAddress: string) => {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TON –≤ –Ω–∞–Ω–æ–¢–û–ù—ã (1 TON = 1e9 –Ω–∞–Ω–æ–¢–û–ù–æ–≤)
    const amountInNano = Math.floor(amount * 1e9).toString();
    
    const result = await tonConnectUI.sendTransaction({
      validUntil: Math.floor(Date.now() / 1000) + 600, // 10 –º–∏–Ω—É—Ç
      messages: [
        {
          amount: amountInNano,
          address: toAddress
        }
      ]
    });
    return { boc: result.boc };
  }, [tonConnectUI]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  const refreshBalance = useCallback(async () => {
    try {
      if (!telegramUser?.id) {
        console.warn('[GameRoom] ‚ö†Ô∏è –ù–µ—Ç telegramUser.id, –Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        return;
      }
      
      const cacheKey = Date.now();
      const response = await fetch(`/api/user-data?telegramId=${telegramUser.id}&_cache=${cacheKey}`);
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.success && data.data) {
        const apiBalance = {
          chance: Number(data.data.tickets || 0),
          tonotChance: Number(data.data.tonotChanceTickets || 0),
          tonot: Number(data.data.balance || 0),
          ton: Number(data.data.tonBalance || 0)
        };
        
        setBalance(apiBalance);
      }
    } catch (error) {
      console.error('[GameRoom] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }, [telegramUser?.id]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (!telegramUser?.id) return;
    refreshBalance();
  }, [telegramUser?.id, refreshBalance]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  useEffect(() => {
    if (!telegramUser?.id) return;
    
    const balanceInterval = setInterval(() => {
      refreshBalance();
    }, 15000); // –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    
    return () => clearInterval(balanceInterval);
  }, [telegramUser?.id, refreshBalance]);
  
  // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞
  const handleSoundToggle = useCallback((e: React.MouseEvent) => {
    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    toggleMute();
  }, [toggleMute]);

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∞–∑ –∏–≥—Ä—ã
  const gameResultValue = useMemo(() => {
    console.log('[GameRoom] üé≤ –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:', {
      phase: currentPhase,
      result: gameState.result
    });
    
    return gameState.result?.status === 'win' ? 'win' : 'lose';
  }, [gameState.result, currentPhase]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–≤—É–∫–æ–≤ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏
  useEffect(() => {
    if (currentPhase === GamePhase.SPINNING && !isMuted) {
      console.log('[GameRoom] üé≤ –ù–∞—á–∞–ª–æ –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞');
      playGameEffect('spin', true);
      
      return () => {
        console.log('[GameRoom] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–æ–≤');
        cleanupSounds();
      };
    }
  }, [currentPhase, playGameEffect, cleanupSounds, isMuted]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–≤—É–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  useEffect(() => {
    if (gameState.result) {
      cleanupSounds();
      if (!isMuted) {
        playGameEffect(gameState.result.status === 'win' ? 'win' : 'lose');
      }
    }
  }, [gameState.result, playGameEffect, cleanupSounds, isMuted]);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–≤—É–∫–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
  useEffect(() => {
    if (gameState.status === 'completed') {
      console.log('[GameRoom] üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—á–∏—â–∞–µ–º –∑–≤—É–∫–∏');
      cleanupSounds();
    }
  }, [gameState.status, cleanupSounds]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∫–µ—Ç-—Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (!socketIsConnected || !telegramUser?.id) return;
    
    // –ù–∞—à–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ -> COUNTDOWN
    const unsubscribeOpponentFound = on('opponent_found', (matchData) => {
      if (!matchData) return;
      
      updateGameState({
        status: 'in_progress',
        phase: GamePhase.COUNTDOWN,
        match: {
          ...matchData,
          createdAt: matchData.createdAt ? matchData.createdAt.toString() : new Date().toString()
        },
        waitingStartTime: null,
        countdown: 5
      });
    });
    
    // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ -> RESULT
    const unsubscribeGameCompleted = on('game_completed', (data) => {
      console.log('[GameRoom] üì¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ game_completed:', data);
      
      if (!data) {
        console.warn('[GameRoom] ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ game_completed');
        return;
      }

      cleanupSounds();
      
      console.log('[GameRoom] üéÆ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ RESULT');
      
      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      updateGameState({
        status: 'completed',
        phase: GamePhase.RESULT,
        result: {
          status: data.isWinner ? 'win' : 'lose',
          ticketsAmount: data.isWinner ? 180 : 0
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      refreshBalance();
    });
    
    return () => {
      unsubscribeOpponentFound();
      unsubscribeGameCompleted();
    };
  }, [socketIsConnected, telegramUser?.id, updateGameState, cleanupSounds, refreshBalance, on]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
  const handleStartGame = useCallback(async () => {
    try {
      console.log('[GameRoom] –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
      setIsLoading(true);
      setError(null);
      
      if (balance?.chance <= 0) {
        setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã');
        return;
      }
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞ –î–û –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      playClickSound();
      
      await findOpponent(1);
      
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      setBalance(prev => ({
        ...prev,
        chance: Math.max(0, prev.chance - 1)
      }));
    } catch (error) {
      console.error('[GameRoom] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  }, [balance, findOpponent, playClickSound]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–∂–∏–¥–∞–Ω–∏—è
  const handleCancelWaiting = useCallback(async () => {
    try {
      console.log('[GameRoom] –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è');
      setIsLoading(true);
      playClickSound();
      await cancelWaiting();
      await refreshBalance(); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    } catch (error) {
      console.error('[GameRoom] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è:', error);
    } finally {
      setIsLoading(false);
    }
  }, [cancelWaiting, playClickSound, refreshBalance]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
  const resetGame = useCallback(() => {
    console.log('[GameRoom] –°–±—Ä–æ—Å –∏–≥—Ä—ã');
    resetGameState();
    updateGameState({ chancePhaseCompleted: false });
    refreshBalance();
  }, [resetGameState, updateGameState, refreshBalance]);
  
  // –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–∞–ª–æ–∫
  const handleModal = useCallback((modal: keyof ModalState, isOpen: boolean) => {
    setModalState((prev: ModalState) => ({ ...prev, [modal]: isOpen }));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const handleScreenChange = useCallback((screen: ScreenType) => {
    playClickSound();

    switch (screen) {
      case ScreenType.HOME:
        handleModal('menuTransition', true);
        break;
      case ScreenType.TICKETS:
        handleModal('tickets', true);
        break;
      case ScreenType.EXCHANGE:
        handleModal('exchange', true);
        break;
      case ScreenType.HISTORY:
        handleModal('history', true);
        break;
    }
  }, [handleModal, playClickSound]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  const handlePurchaseSuccess = useCallback(() => {
    refreshBalance();
  }, [refreshBalance]);

  const handleExchangeSuccess = useCallback(() => {
    handleModal('exchange', false);
    refreshBalance();
  }, [handleModal, refreshBalance]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞
  const handleSpinComplete = useCallback(() => {
    console.log('[GameRoom] üé° –ö–æ–ª–µ—Å–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å');
    
    const matchId = gameState.match?.matchId;
    const player1Id = gameState.match?.player1Id;
    const player2Id = gameState.match?.player2Id;
    
    if (!matchId || !player1Id || !player2Id) {
      console.error('[GameRoom] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞:', { matchId, player1Id, player2Id });
      return;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ –≤—Ä–∞—â–µ–Ω–∏—è
    cleanupSounds();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É
    if (currentPhase === GamePhase.SPINNING && gameState.status === 'in_progress') {
      console.log('[GameRoom] üé≤ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã');
      
      gameApi.completeGame({
        matchId,
        player1Id,
        player2Id,
        ticketsAmount: gameState.match?.ticketsAmount || 0,
        winnerId: null // API —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      }).then(response => {
        console.log('[GameRoom] üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', response);
        
        if (response.success && response.data) {
          const isWinner = response.data.winnerId === telegramUser?.id;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
          updateGameState({
            status: 'completed',
            phase: GamePhase.RESULT,
            result: {
              status: isWinner ? 'win' : 'lose',
              ticketsAmount: isWinner ? 180 : 0
            }
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          refreshBalance();
        }
      }).catch(console.error);
    }
  }, [gameState.match, currentPhase, gameState.status, cleanupSounds, telegramUser?.id, updateGameState, refreshBalance]);

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–≤—É–∫–æ–≤ –∏ —Ñ–∞–∑ –∏–≥—Ä—ã
  useEffect(() => {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
    const activePhase = currentPhase === GamePhase.WAITING ? 'waiting' : 
                      currentPhase === GamePhase.COUNTDOWN ? 'countdown' : 
                      currentPhase === GamePhase.CHANCE ? 'chance' : 
                      currentPhase === GamePhase.SPINNING ? 'spinning' : 
                      currentPhase === GamePhase.RESULT ? 'result' : 'idle';
                      
    console.log('[GameRoom] üîÑ –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –∏–≥—Ä—ã:', activePhase);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞–∑—ã –®–ê–ù–°
    if (currentPhase === GamePhase.CHANCE) {
      const timer = setTimeout(() => {
        console.log('[GameRoom] ‚è±Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞–∑—ã –®–ê–ù–°');
        updateGameState({ chancePhaseCompleted: true });
      }, 2000);
      
      return () => clearTimeout(timer);
    }
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    console.log('[GameRoomContainer] –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', {
      status: gameState.status,
      match: gameState.match,
      isWaiting: currentPhase === GamePhase.WAITING,
      isPlaying: currentPhase === GamePhase.PLAYING,
      chancePhaseCompleted: gameState.chancePhaseCompleted
    });
    
  }, [
    currentPhase,
    gameState,
    updateGameState
  ]);

  return (
    <div className={styles.container}>
      {isLoading && (
        <div className={styles.loadingOverlay}>
          <p>{gameT('loading')}</p>
        </div>
      )}
      
      {/* –§–æ–Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <div className={styles.starsBackground}></div>
      <div className={styles.gridFloor}></div>
      
      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <div className={styles.coin1}></div>
      <div className={styles.coin2}></div>
      <div className={styles.coin3}></div>
      <div className={styles.coin4}></div>
      <div className={styles.coin5}></div>
      
      {/* –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–∞ */}
      <button 
        className={styles.soundButton}
        onClick={handleSoundToggle}
        aria-label={isMuted ? i18n('unmute_sound') : i18n('mute_sound')}
      >
        {isMuted ? 'üîá' : 'üîä'}
      </button>
      
      {/* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã */}
      <GameHeader balance={balance} />
      
      <div className={styles.content}>
        {/* –ö–æ–ª–µ—Å–æ –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–æ –º–µ–Ω—è–µ—Ç —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
        <YinYangWheel 
          isSpinning={currentPhase === GamePhase.SPINNING} 
          onSpinComplete={handleSpinComplete}
        />

        {/* –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π - –í–°–ï–ì–î–ê –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è */}
        <GameControls
          user={user}
          balance={balance}
          isWaiting={currentPhase === GamePhase.WAITING}
          isWheelSpinning={currentPhase === GamePhase.SPINNING}
          showCountdown={currentPhase === GamePhase.COUNTDOWN}
          showGameResult={currentPhase === GamePhase.RESULT}
          isLoading={isLoading}
          error={error || gameError}
          onStartGame={handleStartGame}
        />
      </div>
      
      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <BottomNavigation 
        activeScreen={ScreenType.GAME_ROOM}
        onNavigate={handleScreenChange}
        useDirectHomeNavigation={false}
      />
      
      {/* –û–≤–µ—Ä–ª–µ–∏ –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
      {currentPhase === GamePhase.WAITING && (
        <WaitingOverlay 
          waitingStartTime={gameState.waitingStartTime}
          onCancelWaiting={handleCancelWaiting}
        />
      )}
      
      <CountdownOverlay 
        isVisible={currentPhase === GamePhase.COUNTDOWN}
        countdown={gameState.countdown}
        opponentName={telegramUser?.id === gameState.match?.player1Id ? gameState.match?.player2Name : gameState.match?.player1Name}
        onCountdownComplete={() => updateGameState({ countdown: 0 })}
      />
      
      <ResultModal 
        isVisible={currentPhase === GamePhase.RESULT}
        result={gameResultValue}
        winAmount={gameState.result?.ticketsAmount || 0}
        onClose={() => {
          console.log('[GameRoom] üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
          resetGame();
        }}
      />
      
      <ChanceOverlay isVisible={currentPhase === GamePhase.CHANCE} />
      
      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {modalState.tickets && (
        <TicketPurchaseModal
          isOpen={true}
          onClose={() => handleModal('tickets', false)}
          onPurchaseSuccess={handlePurchaseSuccess}
          telegramId={telegramUser?.id}
          walletAddress={tonAddress ?? undefined}
          connected={isWalletConnected}
          sendTransaction={tonSendTransaction}
        />
      )}
      
      {modalState.exchange && (
        <ExchangeModal
          open={true}
          onClose={() => handleModal('exchange', false)}
          balance={balance}
          userId={telegramUser?.id || ''}
          onSuccess={handleExchangeSuccess}
        />
      )}
      
      {modalState.history && (
        <HistoryModal
          open={true}
          onClose={() => handleModal('history', false)}
          userId={telegramUser?.id || ''}
        />
      )}
      
      {/* –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ */}
      {modalState.menuTransition && (
        <GameTransition 
          direction="toMenu"
          onComplete={() => {
            handleModal('menuTransition', false);
            router.push('/');
          }}
        />
      )}
    </div>
  );
};

export default GameRoomContainer; 