import { Socket } from 'socket.io';
import { ClientToServerEvents, ServerToClientEvents } from '@/@types/socket';
import User from '@/models/User';
import Match from '@/models/Match';
import WaitingPlayer from '@/models/WaitingPlayer';
import { v4 as uuidv4 } from 'uuid';

// Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
export const activeX2Connections = new Set<Socket<ClientToServerEvents, ServerToClientEvents>>();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è X2 —Ä–µ–∂–∏–º–∞
export const X2_CONFIG = {
  waitingTimeout: 120000,  // 2 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  matchTimeout: 300000,    // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  countdownTime: 5,        // –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  ticketPrice: 1          // —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –±–∏–ª–µ—Ç–∞—Ö
};

/**
 * –û—á–∏—Å—Ç–∫–∞ "–∑–∞–≤–∏—Å—à–∏—Ö" –º–∞—Ç—á–µ–π –∏ –∏–≥—Ä–æ–∫–æ–≤
 */
export async function cleanupStalledMatchesX2() {
  try {
    const now = new Date();
    const matchTimeout = new Date(now.getTime() - X2_CONFIG.matchTimeout);
    const waitingTimeout = new Date(now.getTime() - X2_CONFIG.waitingTimeout);
    
    // –û—Ç–º–µ–Ω—è–µ–º "–∑–∞–≤–∏—Å—à–∏–µ" –º–∞—Ç—á–∏
    const stalledMatches = await Match.updateMany(
      { 
        status: { $in: ['waiting', 'matched'] },
        createdAt: { $lt: matchTimeout }
      },
      {
        $set: { 
          status: 'canceled',
          cancelReason: 'timeout',
          canceledAt: now
        }
      }
    );
    
    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    const deletedPlayers = await WaitingPlayer.deleteMany({
      timestamp: { $lt: waitingTimeout }
    });
    
    if (stalledMatches.modifiedCount > 0 || deletedPlayers.deletedCount > 0) {
      console.log(`[X2] –û—á–∏—Å—Ç–∫–∞: –æ—Ç–º–µ–Ω–µ–Ω–æ ${stalledMatches.modifiedCount} –º–∞—Ç—á–µ–π, —É–¥–∞–ª–µ–Ω–æ ${deletedPlayers.deletedCount} –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤`);
    }
  } catch (error) {
    console.error('[X2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ "–∑–∞–≤–∏—Å—à–∏—Ö" –º–∞—Ç—á–µ–π:', error);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è X2
 */
export function handleX2Connection(socket: Socket<ClientToServerEvents, ServerToClientEvents>) {
  console.log('[X2Socket] üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
  
  const telegramId = socket.handshake.query.telegramId 
    ? parseInt(socket.handshake.query.telegramId as string, 10) 
    : undefined;

  console.log(`[X2] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: ${socket.id}, Telegram ID: ${telegramId}`);

  if (!telegramId) {
    socket.emit('error', '–ù–µ —É–∫–∞–∑–∞–Ω telegramId');
    socket.disconnect();
    return;
  }

  socket.data.telegramId = telegramId;
  socket.data.joinedAt = new Date();
  activeX2Connections.add(socket);

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ç—á–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  cleanupStalledMatchesX2();

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
  socket.on('join_waiting_room', (data: { telegramId: number; ticketsAmount: number }) => {
    (async () => {
      try {
        const user = await User.findOne({ telegramId: data.telegramId });
        const username = user?.username || '–ò–≥—Ä–æ–∫';
        console.log(`[X2] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ ${data.telegramId} (${username})`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        if (!user || user.balance.chance < X2_CONFIG.ticketPrice) {
          socket.emit('error', '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –º–∞—Ç—á–µ
        const existingMatch = await Match.findOne({
          $or: [
            { player1Id: data.telegramId },
            { player2Id: data.telegramId }
          ],
          status: { $in: ['waiting', 'matched'] }
        });

        if (existingMatch) {
          socket.emit('error', '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–∞—Ç—á–µ');
          return;
        }

        // –ò—â–µ–º –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        const waitingOpponent = await WaitingPlayer.findOne({ 
          telegramId: { $ne: data.telegramId } 
        }).sort({ timestamp: 1 });

        if (waitingOpponent) {
          // –ï—Å–ª–∏ –Ω–∞—à–µ–ª—Å—è –æ–ø–ø–æ–Ω–µ–Ω—Ç, —Å–æ–∑–¥–∞–µ–º –º–∞—Ç—á
          const matchId = uuidv4();
          const match = new Match({
            matchId,
            player1Id: data.telegramId,
            player1Name: username,
            player2Id: waitingOpponent.telegramId,
            player2Name: waitingOpponent.username || '–ò–≥—Ä–æ–∫',
            ticketsAmount: X2_CONFIG.ticketPrice,
            status: 'matched',
            createdAt: new Date()
          });

          await match.save();

          // –£–¥–∞–ª—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          await WaitingPlayer.deleteOne({ telegramId: waitingOpponent.telegramId });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–µ –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
          const matchData = {
            matchId,
            player1Id: data.telegramId,
            player1Name: username,
            player2Id: waitingOpponent.telegramId,
            player2Name: waitingOpponent.username || '–ò–≥—Ä–æ–∫',
            ticketsAmount: X2_CONFIG.ticketPrice,
            createdAt: match.createdAt
          };

          socket.emit('opponent_found', matchData);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
          const opponentSocket = Array.from(activeX2Connections).find(
            s => s.data.telegramId === waitingOpponent.telegramId
          );
          if (opponentSocket) {
            opponentSocket.emit('opponent_found', matchData);
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
          const waitingPlayer = new WaitingPlayer({
            telegramId: data.telegramId,
            username: username,
            timestamp: new Date()
          });
          await waitingPlayer.save();
        }

      } catch (error) {
        console.error('[X2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É:', error);
        socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É');
      }
    })();
  });

  // –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è
  socket.on('cancel_waiting', (telegramId: number) => {
    (async () => {
      try {
        console.log(`[X2] –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}`);
        await WaitingPlayer.deleteOne({ telegramId });
        socket.emit('game_canceled', '–ü–æ–∏—Å–∫ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω');
      } catch (error) {
        console.error('[X2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è:', error);
        socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è');
      }
    })();
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  socket.on('complete_game', async (data: { 
    matchId: string;
    winnerId: number | null;
    player1Id: number;
    player2Id: number;
    ticketsAmount: number;
  }) => {
    try {
      console.log(`[X2] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã ${data.matchId}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${data.winnerId}`);

      const match = await Match.findOne({ matchId: data.matchId });
      if (!match) {
        socket.emit('error', '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ –º–∞—Ç—á
      if (match.status === 'completed') {
        console.log(`[X2] –ú–∞—Ç—á ${data.matchId} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω`);
        socket.emit('error', '–ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
      if (data.winnerId && data.winnerId !== match.player1Id && data.winnerId !== match.player2Id) {
        console.log(`[X2] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ${data.winnerId} –¥–ª—è –º–∞—Ç—á–∞ ${data.matchId}`);
        socket.emit('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á
      match.status = 'completed';
      match.winnerId = data.winnerId;
      match.completedAt = new Date();
      await match.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      if (data.winnerId) {
        const winner = await User.findOne({ telegramId: data.winnerId });
        if (winner) {
          winner.balance.chance += data.ticketsAmount * 2;
          await winner.save();
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
      const gameResult = {
        matchId: data.matchId,
        winnerId: data.winnerId,
        ticketsAmount: data.ticketsAmount,
        isWinner: false
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
      const player1Socket = Array.from(activeX2Connections).find(
        s => s.data.telegramId === data.player1Id
      );
      if (player1Socket) {
        player1Socket.emit('game_completed', {
          ...gameResult,
          isWinner: data.winnerId === data.player1Id
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É
      const player2Socket = Array.from(activeX2Connections).find(
        s => s.data.telegramId === data.player2Id
      );
      if (player2Socket) {
        player2Socket.emit('game_completed', {
          ...gameResult,
          isWinner: data.winnerId === data.player2Id
        });
      }

    } catch (error) {
      console.error('[X2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
      socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã');
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', async () => {
    try {
      console.log('[X2] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
      activeX2Connections.delete(socket);

      if (telegramId) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        await WaitingPlayer.deleteOne({ telegramId });
      }
    } catch (error) {
      console.error('[X2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error);
    }
  });
} 