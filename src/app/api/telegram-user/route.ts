import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/db';
import User from '@/models/User';
import Referral from '@/models/Referral';

export const dynamic = 'force-dynamic';

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 */
async function createTelegramUser(telegramId: string, userData: any) {
  console.log('[API telegram-user] üìù –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { telegramId });
  
  const user = await User.findOne({ telegramId });
  
  if (user) {
    console.log('[API telegram-user] ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.firstName = userData.firstName || user.firstName;
    user.lastName = userData.lastName || user.lastName;
    user.username = userData.username || user.username;
    user.photoUrl = userData.photoUrl || user.photoUrl;
    user.chatId = userData.chatId || user.chatId;
    await user.save();
    return user;
  }

  console.log('[API telegram-user] ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const newUser = await User.create({
    telegramId,
    firstName: userData.firstName || '',
    lastName: userData.lastName || '',
    username: userData.username || '',
    photoUrl: userData.photoUrl || '',
    chatId: userData.chatId || '',
    referralCode: `${telegramId.slice(-5)}_${Math.random().toString(36).substring(2, 7)}`,
    tickets: 0,
    tonotChanceTickets: 0,
    balance: 0,
    tonBalance: 0,
    lastActive: new Date()
  });

  console.log('[API telegram-user] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', { id: newUser.telegramId });
  return newUser;
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
 */
async function registerReferral(telegramId: string, startParam: string) {
  console.log('[API telegram-user] üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', { telegramId, startParam });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
  const referer = await User.findOne({ referralCode: startParam });
  if (!referer) {
    console.log('[API telegram-user] ‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', startParam);
    throw new Error('Invalid referral code');
  }
  console.log('[API telegram-user] ‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä:', {
    id: referer.telegramId,
    code: startParam
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—Å—Ç—å
  if (referer.telegramId === telegramId) {
    console.log('[API telegram-user] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—Å—Ç–∏:', telegramId);
    throw new Error('Cannot register your own referral code');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å
  const existingReferral = await Referral.findOne({
    refererId: referer.telegramId,
    referralId: telegramId
  });

  if (existingReferral) {
    console.log('[API telegram-user] ‚ÑπÔ∏è –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', {
      refererId: existingReferral.refererId,
      referralId: existingReferral.referralId,
      isValid: existingReferral.isValid
    });
    return existingReferral;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  const referal = await User.findOne({ telegramId });
  if (!referal) {
    console.log('[API telegram-user] ‚ùå –†–µ—Ñ–µ—Ä–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', telegramId);
    throw new Error('Referral user not found');
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
  console.log('[API telegram-user] üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏');
  const newReferral = new Referral({
    refererId: referer.telegramId,
    referralId: telegramId,
    username: referal.username,
    firstName: referal.firstName,
    lastName: referal.lastName,
    photoUrl: referal.photoUrl,
    hasPlayedRoomA: false,
    hasPlayedRoomB: false,
    isValid: false,
    createdAt: new Date()
  });

  await newReferral.save();
  console.log('[API telegram-user] ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞:', {
    id: newReferral._id,
    refererId: newReferral.refererId,
    referralId: newReferral.referralId
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
  if (!referer.referrals) {
    referer.referrals = [];
  }

  referer.referrals.push({
    userId: telegramId,
    username: referal.username,
    photoUrl: referal.photoUrl,
    roomAPlayed: false,
    roomBPlayed: false,
    isValid: false
  });

  await referer.save();
  console.log('[API telegram-user] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
    refererId: referer.telegramId,
    referralsCount: referer.referrals.length
  });

  return newReferral;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
 */
async function getUserWithReferrals(telegramId: string) {
  console.log('[API telegram-user] üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:', telegramId);
  const user = await User.findOne({ telegramId });
  if (!user) {
    throw new Error('User not found');
  }
  return user;
}

export async function POST(req: NextRequest): Promise<NextResponse> {
  console.log('[API telegram-user] üì• –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
  
  try {
    // 1. –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const headers = {
      contentType: req.headers.get('content-type'),
      userAgent: req.headers.get('user-agent'),
      referer: req.headers.get('referer')
    };
    console.log('[API telegram-user] üìã Headers:', headers);

    // 2. –ü–æ–ª—É—á–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ referer
    const refererUrl = headers.referer ? new URL(headers.referer) : null;
    const startParamFromReferer = refererUrl?.searchParams.get('tgWebAppStartParam');

    console.log('[API telegram-user] üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ referer:', {
      startParamFromReferer,
      fullRefererUrl: headers.referer
    });

    const body = await req.json();
    
    console.log('[API telegram-user] üì• –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', {
      id: body.id,
      startParam: body.startParam,
      hasStartParam: !!body.startParam
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º startParam –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏–∑ referer
    const startParam = body.startParam || startParamFromReferer;
    
    // 3. –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('[API telegram-user] üì¶ –ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ startParam
    const startParamSources = {
      fromBody: body.startParam,
      fromStartParam: body.start_param,
      fromWebApp: body.tgWebAppStartParam,
      fromWebAppData: body.webAppData?.start_param,
      fromReferer: startParamFromReferer
    };
    
    console.log('[API telegram-user] üîç –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ startParam:', startParamSources);
    
    // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π startParam
    const finalStartParam = 
      startParamSources.fromBody || 
      startParamSources.fromStartParam ||
      startParamSources.fromWebApp ||
      startParamSources.fromWebAppData ||
      startParamSources.fromReferer;
    
    console.log('[API telegram-user] ‚ú® –ò—Ç–æ–≥–æ–≤—ã–π startParam:', finalStartParam);

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    const telegramId = body.telegramId || body.id;
    const userData = {
      firstName: body.firstName || body.first_name,
      lastName: body.lastName || body.last_name,
      username: body.username,
      chatId: body.chatId || body.telegram_chat_id
    };

    if (!telegramId) {
      console.log('[API telegram-user] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegramId');
      return NextResponse.json({ 
        success: false, 
        error: 'Telegram ID is required' 
      }, { status: 400 });
    }

    await connectToDatabase();
    
    // 1. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await createTelegramUser(String(telegramId), userData);
    
    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å startParam, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    let referral = null;
    if (finalStartParam) {
      try {
        console.log('[API telegram-user] üéØ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', {
        telegramId,
          startParam: finalStartParam,
          userData
        });
        referral = await registerReferral(String(telegramId), finalStartParam);
      } catch (refError) {
        console.error('[API telegram-user] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', refError);
      }
    } else {
      console.log('[API telegram-user] ‚ÑπÔ∏è startParam –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await getUserWithReferrals(String(telegramId));

    console.log('[API telegram-user] ‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ:', {
      userId: telegramId,
      hasStartParam: !!finalStartParam,
      hasReferral: !!referral,
      referralStatus: referral ? {
        isValid: referral.isValid,
        hasPlayedRoomA: referral.hasPlayedRoomA,
        hasPlayedRoomB: referral.hasPlayedRoomB
      } : null
    });

    return NextResponse.json({
      success: true, 
      data: updatedUser,
      referral: referral
    });
  } catch (error) {
    console.error('[API telegram-user] ‚ùå –û—à–∏–±–∫–∞:', error);
    return NextResponse.json({ 
      success: false, 
      error: error instanceof Error ? error.message : 'Failed to process user'
    }, { status: 500 });
  }
} 