import { NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/db';
import mongoose from 'mongoose';
import Match from '@/models/Match';
import User from '@/models/User';
import { ReferralService } from '@/lib/referral';
import { ObjectId } from 'mongodb';
import { Server } from 'socket.io';

declare global {
  var io: Server;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
export const dynamic = 'force-dynamic';

const MAX_RETRIES = 3;
const RETRY_DELAY = 1000;

/**
 * POST-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞
 * @param request - –ó–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞
 * @returns {Promise<NextResponse>} - –û—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ –∏–ª–∏ –æ—à–∏–±–∫–æ–π
 */
export async function POST(request: Request): Promise<NextResponse> {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await connectToDatabase();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const data = await request.json();
    const { matchId } = data;
    
    if (!matchId) {
      console.error('[API match/complete] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç matchId:', { matchId });
      return NextResponse.json(
        { success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è matchId' },
        { status: 400 }
      );
    }
    
    console.log('[API match/complete] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞:', { matchId });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const executeWithRetry = async (attempt = 1) => {
      const session = await mongoose.startSession();
      
      try {
        session.startTransaction();

        // –ù–∞–π–¥–µ–º –º–∞—Ç—á
        const match = await Match.findOne({ matchId }).session(session);
        
        if (!match) {
          await session.abortTransaction();
          return NextResponse.json({ success: false, error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ –º–∞—Ç—á
        if (match.status === 'completed') {
          console.warn('[API match/complete] –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω:', matchId);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
          const existingWinner = await User.findOne({ telegramId: match.winnerId });
          const existingLoser = await User.findOne({ 
            telegramId: match.player1Id === match.winnerId ? match.player2Id : match.player1Id 
          });

          return NextResponse.json({ 
            success: true, 
            data: { 
              matchId: match.matchId,
              winnerId: match.winnerId,
              status: match.status,
              winner: existingWinner ? {
                telegramId: existingWinner.telegramId,
                balance: existingWinner.balance,
                tickets: existingWinner.tickets,
                tonotChanceTickets: existingWinner.tonotChanceTickets
              } : null,
              loser: existingLoser ? {
                telegramId: existingLoser.telegramId,
                balance: existingLoser.balance,
                tickets: existingLoser.tickets,
                tonotChanceTickets: existingLoser.tonotChanceTickets
              } : null
            },
            message: '–ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–≥—Ä–∞–¥—ã —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã'
          });
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const winnerId = Math.random() < 0.5 ? match.player1Id : match.player2Id;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
        match.status = 'completed';
        match.winnerId = winnerId;
        match.completedAt = new Date();
        await match.save({ session });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        const loserId = match.player1Id === winnerId ? match.player2Id : match.player1Id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
        const [winner, loser] = await Promise.all([
          User.findOne({ telegramId: winnerId }).session(session),
          User.findOne({ telegramId: loserId }).session(session)
        ]);
        
        if (!winner || !loser) {
          await session.abortTransaction();
          console.error('[API match/complete] –ù–µ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤:', { winnerId, loserId });
          return NextResponse.json(
            { success: false, error: '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
            { status: 404 }
          );
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
        if (winner.telegramId === loser.telegramId) {
          await session.abortTransaction();
          console.error('[API match/complete] –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ:', winner.telegramId);
          return NextResponse.json(
            { success: false, error: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–≥—Ä–æ–∫–æ–º' },
            { status: 400 }
          );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner.balance += 180;
        winner.tonotWon = (winner.tonotWon || 0) + 180;
        await winner.save({ session });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∏–ª–µ—Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        loser.tonotChanceTickets = (loser.tonotChanceTickets || 0) + 1;
        await loser.save({ session });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        await Promise.all([
          ReferralService.updateGameStatus(winner.telegramId, 'A'),
          ReferralService.updateGameStatus(loser.telegramId, 'A')
        ]);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        const userHistoryCollection = mongoose.connection.collection('userHistory');
        await Promise.all([
          userHistoryCollection.insertOne({
            telegramId: winner.telegramId,
            type: 'game',
            date: new Date(),
            details: {
              matchId: match.matchId,
              opponentId: loserId,
              opponentName: loser ? `${loser.firstName} ${loser.lastName || ''}`.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫',
              result: 'win',
              tonotReward: 180
            }
          }, { session }),
          userHistoryCollection.insertOne({
            telegramId: loser.telegramId,
            type: 'game',
            date: new Date(),
            details: {
              matchId: match.matchId,
              opponentId: winnerId,
              opponentName: winner ? `${winner.firstName} ${winner.lastName || ''}`.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫',
              result: 'lose',
              tonotChanceTickets: 1
            }
          }, { session })
        ]);
        
        // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await session.commitTransaction();
        
        // –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç
        const response = {
          success: true,
          data: {
            matchId: match.matchId,
            winnerId: match.winnerId,
            status: match.status,
            winner: {
              telegramId: winner.telegramId,
              balance: winner.balance,
              tickets: winner.tickets,
              tonotChanceTickets: winner.tonotChanceTickets
            },
            loser: {
              telegramId: loser.telegramId,
              balance: loser.balance,
              tickets: loser.tickets,
              tonotChanceTickets: loser.tonotChanceTickets
            }
          }
        };
        
        console.log('[API match/complete] –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞:', response);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ WebSocket –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        const io = global.io;
        if (io) {
          console.log('[API match/complete] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é:', {
            userId: winnerId,
            isWinner: true,
            matchData: response.data
          });
          
          io.to(`user_${winnerId}`).emit('game_completed', { 
            ...response.data,
            isWinner: true 
          });

          console.log('[API match/complete] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É:', {
            userId: loserId,
            isWinner: false,
            matchData: response.data
          });
          
          io.to(`user_${loserId}`).emit('game_completed', { 
            ...response.data,
            isWinner: false 
          });
        }

        return NextResponse.json(response);

      } catch (error) {
        await session.abortTransaction();

        // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–ø–∏—Å–∏ –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        if (
          error instanceof mongoose.Error || 
          (error as any).code === 112 && 
          attempt < MAX_RETRIES
        ) {
          console.log(`[API match/complete] –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${RETRY_DELAY}–º—Å`);
          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
          return executeWithRetry(attempt + 1);
        }

        throw error;
      } finally {
        session.endSession();
      }
    };

    return executeWithRetry();

  } catch (error) {
    console.error('[API match/complete] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 