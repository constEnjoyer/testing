import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/db';
import { ObjectId } from 'mongodb';
import telegramNotifier, { handleTelegramCallback, updateAdminRequestMessage, sendWithdrawalStatusNotification } from '@/services/telegramNotifier';
import TelegramBot from 'node-telegram-bot-api';

export const dynamic = 'force-dynamic'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è API

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
async function setupWebhook(webhookUrl: string) {
  try {
    if (!telegramNotifier.bot) {
      return { ok: false, error: 'Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
    }
    
    const result = await telegramNotifier.bot.setWebHook(webhookUrl);
    return { ok: result, webhookUrl };
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    return { ok: false, error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞' };
  }
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    console.log("[Telegram Webhook] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", JSON.stringify(body));

    if (body.message) {
      const { message } = body;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - —Å–æ—Ö—Ä–∞–Ω—è–µ–º chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (message.text && message.text.toLowerCase() === '/start') {
        const db = await connectToDatabase();
        const usersCollection = db.db.collection('users');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const user = await usersCollection.findOne({ telegramId: message.from.id.toString() });
        
        if (user) {
          // –û–±–Ω–æ–≤–ª—è–µ–º chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await usersCollection.updateOne(
            { telegramId: message.from.id.toString() },
            { $set: { chatId: message.chat.id.toString() } }
          );
          console.log(`[Telegram Webhook] –û–±–Ω–æ–≤–ª–µ–Ω chatId –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${message.from.id}: ${message.chat.id}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º
        if (!telegramNotifier.bot) {
          console.error("[Telegram Webhook] –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
          return NextResponse.json({ ok: false, error: "–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" });
        }

        await telegramNotifier.bot.sendMessage(
          message.chat.id, 
          `üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤.`
        );
        
        return NextResponse.json({ ok: true });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram –±–æ—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–±—ç–∫ –æ—Ç –∫–Ω–æ–ø–∫–∏
    if (!body || !body.callback_query) {
      // –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ç–∏–ø –≤–µ–±—Ö—É–∫–∞ (–Ω–µ –∫–æ–ª–±—ç–∫ –æ—Ç –∫–Ω–æ–ø–∫–∏), –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      console.log('[Telegram Webhook] –ü–æ–ª—É—á–µ–Ω –Ω–µ callback –∑–∞–ø—Ä–æ—Å');
      return NextResponse.json({ ok: true });
    }
    
    console.log('[Telegram Webhook] –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫:', JSON.stringify(body.callback_query));
    
    const { callback_query } = body;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    const { data: callbackData, message: callbackMessage, id: callback_id } = callback_query;
    
    if (!callbackData || !callbackMessage) {
      console.error('[Telegram Webhook] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞');
      return NextResponse.json({ ok: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞' });
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∏–∑ telegramNotifier, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ callback query
    const callbackHandled = await handleTelegramCallback(callback_query);
    console.log('[Telegram Webhook] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞:', callbackHandled);
    
    // –ï—Å–ª–∏ handleTelegramCallback –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (!callbackHandled) {
      console.error('[Telegram Webhook] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –∑–∞–ø—Ä–æ—Å');
      return NextResponse.json({ ok: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞' });
    }
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞ (approve_ID –∏–ª–∏ reject_ID)
    const [action, requestId] = callbackData.split('_');
    
    if (!action || !requestId || (action !== 'approve' && action !== 'reject')) {
      console.error('[Telegram Webhook] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞:', callbackData);
      return NextResponse.json({ ok: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞' });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è
    const status = action === 'approve' ? 'completed' : 'rejected';
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { db } = await connectToDatabase();
    const withdrawRequestsCollection = db.collection('withdrawRequests');
    
    // –ò—â–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ orderNumber –≤–º–µ—Å—Ç–æ ObjectId
    const withdrawRequest = await withdrawRequestsCollection.findOne({ orderNumber: requestId });

    if (!withdrawRequest) {
      console.error('[Telegram Webhook] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω:', requestId);
      
      await telegramNotifier.bot?.answerCallbackQuery(callback_id, {
        text: '–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      
      return NextResponse.json({ ok: false, error: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    if (withdrawRequest.status !== 'pending') {
      console.error(`[Telegram Webhook] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å ID ${requestId} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: ${withdrawRequest.status})`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
      await updateAdminRequestMessage(
        callbackMessage.chat.id,
        callbackMessage.message_id,
        callbackMessage.text,
        status,
        `–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ (—Å—Ç–∞—Ç—É—Å: ${withdrawRequest.status})`
      );
      
      return NextResponse.json({ ok: false, error: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    await withdrawRequestsCollection.updateOne(
      { orderNumber: requestId },
      { 
        $set: { 
          status, 
          updatedAt: new Date().toISOString() 
        } 
      }
    );
    
    console.log(`[Telegram Webhook] –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${requestId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersCollection = db.collection('users');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await usersCollection.findOne({ telegramId: withdrawRequest.telegramId });
    
    if (user) {
      if (status === 'rejected') {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await usersCollection.updateOne(
          { telegramId: withdrawRequest.telegramId },
          { 
            $set: { 
              tonBalance: (user.tonBalance || 0) + withdrawRequest.amount,
              pendingWithdrawals: Math.max(0, (user.pendingWithdrawals || 0) - withdrawRequest.amount)
            } 
          }
        );
        
        console.log(`[Telegram Webhook] –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawRequest.telegramId}: ${withdrawRequest.amount} TON`);
      } else if (status === 'completed') {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º pendingWithdrawals (TON —É–∂–µ –±—ã–ª —Å–ø–∏—Å–∞–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞)
        await usersCollection.updateOne(
          { telegramId: withdrawRequest.telegramId },
          { 
            $set: { 
              pendingWithdrawals: Math.max(0, (user.pendingWithdrawals || 0) - withdrawRequest.amount)
            } 
          }
        );
        
        console.log(`[Telegram Webhook] –û–±–Ω–æ–≤–ª–µ–Ω—ã pendingWithdrawals –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${withdrawRequest.telegramId}: -${withdrawRequest.amount} TON`);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await updateAdminRequestMessage(
      callbackMessage.chat.id,
      callbackMessage.message_id,
      callbackMessage.text,
      status
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (withdrawRequest.chatId) {
      console.log(`[Telegram Webhook] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ chatId: "${withdrawRequest.chatId}", —Ç–∏–ø: ${typeof withdrawRequest.chatId}`);
      try {
        await sendWithdrawalStatusNotification(
          withdrawRequest.chatId,
          status,
          withdrawRequest.amount,
          withdrawRequest.orderNumber // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
        );
        console.log(`[Telegram Webhook] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawRequest.telegramId}`);
      } catch (notifyError) {
        console.error(`[Telegram Webhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, notifyError);
      }
    } else {
      console.warn(`[Telegram Webhook] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chatId`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å chatId –∏–∑ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ telegramId: withdrawRequest.telegramId });
        
        if (user && user.chatId) {
          await sendWithdrawalStatusNotification(
            user.chatId,
            status,
            withdrawRequest.amount,
            withdrawRequest.orderNumber // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
          );
          console.log(`[Telegram Webhook] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawRequest.telegramId} –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ chatId`);
        } else {
          console.error(`[Telegram Webhook] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${withdrawRequest.telegramId}`);
        }
      } catch (error) {
        console.error(`[Telegram Webhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const userHistoryCollection = db.collection('userHistory');
      
      // –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
      const historyItem = await userHistoryCollection.findOne({
        telegramId: withdrawRequest.telegramId,
        'details.walletAddress': withdrawRequest.walletAddress,
        type: 'withdraw'
      });
      
      if (historyItem) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        await userHistoryCollection.updateOne(
          { _id: historyItem._id },
          { 
            $set: { 
              'details.status': status 
            } 
          }
        );
        
        console.log(`[Telegram Webhook] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${withdrawRequest.telegramId}`);
      }
    } catch (historyError) {
      console.error('[Telegram Webhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', historyError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
    }
    
    return NextResponse.json({ ok: true, status });
    
  } catch (error: any) {
    console.error('[Telegram Webhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    
    return NextResponse.json({ 
      ok: false, 
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–µ–±—Ö—É–∫–∞ –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export async function GET(req: NextRequest) {
  // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const webhookUrl = process.env.TELEGRAM_WEBHOOK_URL || 
                    `${process.env.NEXT_PUBLIC_APP_URL}/api/telegram-webhook`;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
  const setupRequested = req.nextUrl.searchParams.get('setup') === 'true';
  
  let webhookStatus: any = { configured: false };
  
  // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
  if (setupRequested && process.env.NODE_ENV === 'production') {
    webhookStatus = await setupWebhook(webhookUrl);
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: ${JSON.stringify(webhookStatus)}`);
  }
  
  return NextResponse.json({ 
    ok: true, 
    message: 'Telegram webhook API is ready',
    bot_configured: telegramNotifier.isConfigured,
    webhook_url: webhookUrl,
    webhook_status: webhookStatus
  });
} 