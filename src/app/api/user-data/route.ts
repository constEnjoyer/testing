import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/db';
import User from '@/models/User';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
export const dynamic = 'force-dynamic';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {NextRequest} req - –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<NextResponse>} - –û—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—à–∏–±–∫–æ–π
 */
export async function GET(req: NextRequest): Promise<NextResponse> {
  try {
    console.log('[API user-data] üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // –ü–æ–ª—É—á–∞–µ–º telegramId –∏–∑ URL
    const telegramId = req.nextUrl.searchParams.get('telegramId');
    
    if (!telegramId) {
      console.error('[API user-data] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegramId –≤ –∑–∞–ø—Ä–æ—Å–µ');
      return NextResponse.json(
        { 
          success: false, 
          error: 'telegramId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä' 
        }, 
        { status: 400 }
      );
    }
    
    console.log('[API user-data] üîç –ó–∞–ø—Ä–æ—à–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegramId:', telegramId);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      await connectToDatabase();
      console.log('[API user-data] ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } catch (dbError) {
      console.error('[API user-data] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError);
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' 
        }, 
        { status: 500 }
      );
    }
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let user = await User.findOne({ telegramId });
    
    if (!user) {
      console.log('[API user-data] üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
      user = new User({
        telegramId: String(telegramId),
        firstName: '',
        lastName: '',
        username: '',
        photoUrl: '',
        ticketBalance: 0,
        usedTickets: 0,
        bonusTickets: 0,
        referralCode: `${telegramId.slice(-5)}_${Math.random().toString(36).substring(2, 7)}`,
        referrals: [],
        totalValidReferrals: 0,
        pendingBonuses: 0,
        bonusesReceived: 0,
        channelSubscribed: false,
        tickets: 0,
        tonotChanceTickets: 0,
        balance: 0,
        tonBalance: 0
      });
      
      await user.save();
      console.log('[API user-data] ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      telegramId: user.telegramId,
      firstName: user.firstName,
      lastName: user.lastName,
      username: user.username,
      photoUrl: user.photoUrl,
      tickets: user.tickets || 0,
      tonotChanceTickets: user.tonotChanceTickets || 0,
      balance: user.balance || 0,
      tonBalance: user.tonBalance || 0,
      referralCode: user.referralCode || '',
      referrals: user.referrals || []
    };
    
    console.log('[API user-data] ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return NextResponse.json({
      success: true,
      data: userData
    });
    
  } catch (error: any) {
    console.error('[API user-data] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      }, 
      { status: 500 }
    );
  }
} 