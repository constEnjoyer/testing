import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/db';
import User from '@/models/User';
import Referral from '@/models/Referral';
import mongoose from 'mongoose';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
export const dynamic = 'force-dynamic';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
 * @param {NextRequest} req - –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<NextResponse>} - –û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
export async function POST(req: NextRequest): Promise<NextResponse> {
  console.log('[API referral/register] üìù –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
  
  let body;
  try {
    body = await req.json();
    console.log('[API referral/register] üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', body);
  } catch (error) {
    console.error('[API referral/register] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Invalid JSON body' 
    }, { status: 400 });
  }

  const { telegramId, referralCode } = body;

  if (!telegramId || !referralCode) {
    console.error('[API referral/register] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { telegramId, referralCode });
    return NextResponse.json({ 
      success: false, 
      error: 'Telegram ID and referral code are required' 
    }, { status: 400 });
  }

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('[API referral/register] üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectToDatabase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals
    const db = mongoose.connection.db;
    const collections = await db.listCollections({ name: 'referrals' }).toArray();
    
    if (collections.length === 0) {
      console.log('[API referral/register] üìÅ –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é referrals');
      await db.createCollection('referrals');
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
    console.log('[API referral/register] üîç –ü–æ–∏—Å–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É:', referralCode);
    const referer = await User.findOne({ referralCode });

    if (!referer) {
      console.error('[API referral/register] ‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–¥—É:', referralCode);
      return NextResponse.json({ 
        success: false, 
        error: 'Invalid referral code' 
      }, { status: 404 });
    }
    console.log('[API referral/register] ‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω:', {
      id: referer.telegramId,
      username: referer.username
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∞–º —Å–µ–±—è
    if (referer.telegramId === telegramId) {
      console.error('[API referral/register] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞:', telegramId);
      return NextResponse.json({ 
        success: false, 
        error: 'You cannot register your own referral code' 
      }, { status: 400 });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ—Ñ–µ—Ä–∞–ª–∞
    console.log('[API referral/register] üîç –ü–æ–∏—Å–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', telegramId);
    const referal = await User.findOne({ telegramId });

    if (!referal) {
      console.error('[API referral/register] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–µ—Ñ–µ—Ä–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', telegramId);
      return NextResponse.json({ 
        success: false, 
        error: 'User not found' 
      }, { status: 404 });
    }
    console.log('[API referral/register] ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª –Ω–∞–π–¥–µ–Ω:', {
      id: referal.telegramId,
      username: referal.username
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    console.log('[API referral/register] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–≤—è–∑–∏');
    const existingReferral = await Referral.findOne({ 
      refererId: referer.telegramId,
      referalId: telegramId 
    });

    if (existingReferral) {
      console.log('[API referral/register] ‚ö†Ô∏è –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', {
        refererId: existingReferral.refererId,
        referalId: existingReferral.referalId,
        createdAt: existingReferral.createdAt
      });
      return NextResponse.json({ 
        success: false, 
        error: 'This referral connection already exists' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å
    console.log('[API referral/register] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π');
    const pendingReferral = await Referral.findOne({
      referalId: telegramId,
      isValid: false
    });

    if (pendingReferral) {
      console.log('[API referral/register] ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–≤—è–∑—å:', {
        refererId: pendingReferral.refererId,
        createdAt: pendingReferral.createdAt
      });
      return NextResponse.json({ 
        success: false, 
        error: 'Player must complete existing referral requirements first' 
      }, { status: 400 });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
    console.log('[API referral/register] üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏');
    const newReferral = new Referral({
      refererId: referer.telegramId,
      referalId: telegramId,
      username: referal.username,
      firstName: referal.firstName,
      lastName: referal.lastName,
      photoUrl: referal.photoUrl,
      hasPlayedRoomA: false,
      hasPlayedRoomB: false,
      isValid: false,
      createdAt: new Date()
    });

    await newReferral.save();
    console.log('[API referral/register] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å:', {
      id: newReferral._id,
      refererId: newReferral.refererId,
      referalId: newReferral.referalId
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    console.log('[API referral/register] üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞');
    if (!referer.referrals) {
      referer.referrals = [];
    }

    referer.referrals.push({
      userId: telegramId.toString(),
      username: referal.username,
      photoUrl: referal.photoUrl,
      roomAPlayed: false,
      roomBPlayed: false,
      isValid: false
    });

    await referer.save();
    console.log('[API referral/register] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
      refererId: referer.telegramId,
      referralsCount: referer.referrals.length
    });

    return NextResponse.json({ 
      success: true, 
      message: 'Referral connection successfully created',
      data: {
        refererId: referer.telegramId,
        referalId: telegramId,
        createdAt: newReferral.createdAt
      }
    });
  } catch (error) {
    console.error('[API referral/register] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏:', error);
    
    return NextResponse.json({ 
      success: false, 
      error: error instanceof Error ? error.message : 'Failed to create referral connection'
    }, { status: 500 });
  }
} 