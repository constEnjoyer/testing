'use client';

import React, { 
  createContext, 
  useState, 
  useEffect, 
  useCallback, 
  useContext, 
  ReactNode 
} from 'react';
import { initData, useSignal, useLaunchParams } from '@telegram-apps/sdk-react';
import type { TelegramUser } from '@telegram-apps/sdk-react';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserBalance {
  chance: number;
  tonotChance: number;
  tonot: number;
  ton: number;
}

export interface UserProfile {
  id: number;
  firstName: string;
  lastName?: string;
  username?: string;
  telegramChatId?: string;
  telegramId?: number;    // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  walletAddress?: string; // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
  tickets?: number;       // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –±–∏–ª–µ—Ç–æ–≤
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
}

interface UserContextProps {
  user: UserProfile | null;
  balance: UserBalance;
  isLoading: boolean;
  error: string | null;
  fetchUserData: () => Promise<void>;
  setUserLocale: (locale: string) => Promise<void>;
  updateBalance: (newBalance: UserBalance) => void;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
const UserContext = createContext<UserContextProps>({
  user: null,
  balance: { chance: 0, tonotChance: 0, tonot: 0, ton: 0 },
  isLoading: false,
  error: null,
  fetchUserData: async () => {},
  setUserLocale: async () => {},
  updateBalance: () => {},
});

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useUser = () => useContext(UserContext);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤–æ–π—Å—Ç–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
interface UserProviderProps {
  telegramUser?: TelegramUser;
  children: ReactNode;
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const UserProvider: React.FC<UserProviderProps> = ({ telegramUser, children }) => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Mini Apps
  const initDataState = useSignal(initData.state);
  const telegramUserFromProps = telegramUser || initDataState?.user;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [user, setUser] = useState<UserProfile | null>(null);
  const [balance, setBalance] = useState<UserBalance>({
    chance: 0,
    tonotChance: 0,
    tonot: 0,
    ton: 0
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const launch = useLaunchParams();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  const initTelegramUser = useCallback(async () => {
    if (!telegramUserFromProps) {
      console.log('[UserContext] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);
        setUser({
          id: telegramUserFromProps.id,
          firstName: telegramUserFromProps.firstName,
          lastName: telegramUserFromProps.lastName,
          username: telegramUserFromProps.username,
        telegramId: telegramUserFromProps.id
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', error);
      setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsLoading(false);
    }
  }, [telegramUserFromProps]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchUserData = useCallback(async () => {
    if (!telegramUserFromProps?.id) {
      console.log('[UserContext] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      const timestamp = new Date().toISOString();
      console.log(`[UserContext ${timestamp}] –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, telegramUserFromProps.id);

      // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      const cacheKey = Date.now();
      const response = await fetch(`/api/user-data?telegramId=${telegramUserFromProps.id}&_cache=${cacheKey}`);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`[UserContext ${timestamp}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:`, errorText);
        setError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${errorText}`);
        return;
      }

      const data = await response.json();
      console.log(`[UserContext ${timestamp}] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:`, JSON.stringify(data));

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–∏–±–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      let newBalance = { chance: 0, tonotChance: 0, tonot: 0, ton: 0 };
      let userData = null;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
      if (data.success === true && data.data) {
        // –§–æ—Ä–º–∞—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º data –∏ —Ñ–ª–∞–≥–æ–º success
        userData = data.data;
        
        newBalance = {
          chance: Number(data.data.tickets || 0),
          tonotChance: Number(data.data.tonotChanceTickets || 0),
          tonot: Number(data.data.balance || 0),
          ton: Number(data.data.tonBalance || 0)
        };
        
        console.log(`[UserContext ${timestamp}] –û–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–≤–µ—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º data:`, newBalance);
      } else if (data.tickets !== undefined || data.balance !== undefined) {
        // –§–æ—Ä–º–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞
        userData = data;
        
        newBalance = {
          chance: Number(data.tickets || 0),
          tonotChance: Number(data.tonotChanceTickets || 0),
          tonot: Number(data.balance || 0),
          ton: Number(data.tonBalance || 0)
        };
        
        console.log(`[UserContext ${timestamp}] –û–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–æ—Ä–Ω–µ:`, newBalance);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏
      if (userData) {
        setUser(prev => ({
          ...prev,
          ...userData,
          telegramId: telegramUserFromProps.id
        }));
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      console.log(`[UserContext ${timestamp}] –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:`, newBalance);
      setBalance(newBalance);
      
    } catch (error) {
      console.error('[UserContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setIsLoading(false);
    }
  }, [telegramUserFromProps]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const setUserLocale = useCallback(async (locale: string) => {
    if (!telegramUserFromProps) return;

    try {
      console.log('[UserContext] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUserFromProps.id, '–ª–æ–∫–∞–ª—å:', locale);
      
      const response = await fetch('/api/user-locale', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramId: telegramUserFromProps.id,
          locale: locale
        }),
      });
      
      if (response.ok) {
        const result = await response.json();
        console.log(`[UserContext] –õ–æ–∫–∞–ª—å ${locale} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserFromProps.id}:`, result);
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (typeof window !== 'undefined') {
          const event = new CustomEvent('app-locale-changed', { 
            detail: { locale } 
          });
          window.dispatchEvent(event);
        }

        setError(null);
      } else {
        const errorText = await response.text();
        console.error('[UserContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞–ª–∏:', errorText);
        setError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏: ${errorText}`);
      }
    } catch (error) {
      console.error('[UserContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞–ª–∏:', error);
      setError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏: ${error instanceof Error ? error.message : String(error)}`);
    }
  }, [telegramUserFromProps]);

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
  const updateBalance = useCallback((newBalance: UserBalance) => {
    console.log('[UserContext] üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê:', newBalance);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const hasChanges = 
      newBalance.chance !== balance.chance ||
      newBalance.tonotChance !== balance.tonotChance ||
      newBalance.tonot !== balance.tonot ||
      newBalance.ton !== balance.ton;
    
    if (hasChanges) {
      console.log('[UserContext] üìä –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ë–ê–õ–ê–ù–°–ï:', {
        '–°—Ç–∞—Ä—ã–π': balance,
        '–ù–æ–≤—ã–π': newBalance,
        '–í—Ä–µ–º—è': new Date().toISOString()
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setBalance(newBalance);
      
      // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      if (typeof window !== 'undefined') {
        const event = new CustomEvent('balance-updated', { 
          detail: { balance: newBalance } 
        });
        window.dispatchEvent(event);
        console.log('[UserContext] üì¢ –°–æ–∑–¥–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ balance-updated');
      }
    } else {
      console.log('[UserContext] –ë–∞–ª–∞–Ω—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
  }, [balance]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    if (telegramUserFromProps && !user) {
      initTelegramUser();
    }
  }, [telegramUserFromProps, user, initTelegramUser]);

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (telegramUserFromProps?.id) {
      // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      fetchUserData();
      
      // –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
      // –¢–µ–ø–µ—Ä—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∞–º–∏ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å fetchUserData –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      
      console.log('[UserContext] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç fetchUserData —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.');
    }
  }, [telegramUserFromProps, fetchUserData]);

  const contextValue = {
    user,
    balance,
    isLoading,
    error,
    fetchUserData,
    setUserLocale,
    updateBalance
  };

  return (
    <UserContext.Provider value={contextValue}>
      {children}
    </UserContext.Provider>
  );
}; 