'use client';

import { createContext, useContext, useCallback, ReactNode } from 'react';
import { SoundContext } from '@/components/Root/Root';

// –¢–∏–ø—ã –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–≥—Ä—ã
export type GameSoundEffect = 
  // –û–±—â–∏–µ –∑–≤—É–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  | 'win' 
  | 'lose'
  // –ó–≤—É–∫–∏ X10
  | 'merge'
  | 'wheel_appear'
  | 'x10_wheel_spin'
  | 'wheel_disappear';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface GameSoundContextType {
  playGameSound: (effect: GameSoundEffect) => Promise<void>;
  stopGameSound: (effect: GameSoundEffect) => void;
  cleanup: () => void;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
const GameSoundContext = createContext<GameSoundContextType>({
  playGameSound: async () => {},
  stopGameSound: () => {},
  cleanup: () => {}
});

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–≤—É–∫–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useGameSound = () => useContext(GameSoundContext);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∑–≤—É–∫–æ–≤
export const GameSoundProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤—É–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { playGameEffect, cleanupSounds } = useContext(SoundContext);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –∑–≤—É–∫–æ–≤
  const playGameSound = useCallback(async (effect: GameSoundEffect) => {
    console.log('[GameSound] üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∑–≤—É–∫–∞:', effect, '—á–µ—Ä–µ–∑ GameSoundContext');

    try {
      switch (effect) {
        // X10 –∑–≤—É–∫–∏
        case 'merge':
          await playGameEffect('merge');
          break;
        case 'wheel_appear':
          await playGameEffect('wheel_appear');
          break;
        case 'x10_wheel_spin':
          await playGameEffect('wheel_spin', true);
          break;
        case 'wheel_disappear':
          await playGameEffect('wheel_disappear');
          break;
        
        // –û–±—â–∏–µ –∑–≤—É–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        case 'win':
        case 'lose':
          console.log('[GameSound] üéØ –ó–∞–ø—É—Å–∫ –∑–≤—É–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', effect);
          await playGameEffect(effect);
          break;
      }
    } catch (error) {
      console.error('[GameSound] ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }
  }, [playGameEffect]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∑–≤—É–∫–æ–≤
  const stopGameSound = useCallback((effect: GameSoundEffect) => {
    console.log('[GameSound] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –∑–≤—É–∫–∞:', effect, '—á–µ—Ä–µ–∑ GameSoundContext');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏ X10
    if (effect === 'x10_wheel_spin') {
      console.log('[GameSound] üîÑ –û—á–∏—Å—Ç–∫–∞ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ–≥–æ –∑–≤—É–∫–∞:', effect);
      cleanupSounds();
    }
  }, [cleanupSounds]);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const contextValue = {
    playGameSound,
    stopGameSound,
    cleanup: cleanupSounds
  };

  return (
    <GameSoundContext.Provider value={contextValue}>
      {children}
    </GameSoundContext.Provider>
  );
}; 