import TelegramBot from 'node-telegram-bot-api';
import { formatTonAmount, formatDate } from '../utils/formatUtils';

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const appBotToken = process.env.TELEGRAM_BOT_TOKEN;
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationBotToken = process.env.TELEGRAM_NOTIFICATION_BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
// ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID;
// URL –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
const webhookUrl = process.env.TELEGRAM_WEBHOOK_URL || 
                  `${process.env.NEXT_PUBLIC_APP_URL}/api/telegram-webhook`;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const isBotConfigured = !!notificationBotToken && !!adminChatId;
console.log('[TelegramNotifier] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞. –¢–æ–∫–µ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å—Ç—å:', !!notificationBotToken, 'Admin Chat ID –µ—Å—Ç—å:', !!adminChatId);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
let bot: TelegramBot | null = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if (typeof window === 'undefined' && isBotConfigured) {
  try {
    console.log('[TelegramNotifier] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationBotToken?.substring(0, 10) + '...');
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    if (process.env.NODE_ENV !== 'production') {
      bot = new TelegramBot(notificationBotToken as string, { polling: true });
      console.log('[TelegramNotifier] Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
    } else {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
      bot = new TelegramBot(notificationBotToken as string, { polling: false });
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫—É –≤–µ–±—Ö—É–∫–∞ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º API-–º–∞—Ä—à—Ä—É—Ç–µ, –∞ –Ω–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log('[TelegramNotifier] Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ webhook');
    }
  } catch (error) {
    console.error('[TelegramNotifier] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ Telegram
 */
export async function sendMessageToAdmin(
  message: string, 
  buttons: Array<Array<{ text: string, callback_data: string }>> = []
): Promise<boolean> {
  if (!bot || !adminChatId) {
    console.error('[TelegramNotifier] Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_ADMIN_CHAT_ID');
    return false;
  }

  try {
    const options: TelegramBot.SendMessageOptions = {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if (buttons && buttons.length > 0) {
      options.reply_markup = {
        inline_keyboard: buttons
      };
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.sendMessage(adminChatId as string, message, options);
    console.log('[TelegramNotifier] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return true;
  } catch (error) {
    console.error('[TelegramNotifier] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export async function sendWithdrawalRequestNotification(amount: number, address: string, orderNumber: string): Promise<boolean> {
  if (!bot || !adminChatId) {
    console.error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_ADMIN_CHAT_ID');
    return false;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined
    const formattedAmount = formatTonAmount(amount);
    const walletAddress = address || '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const message = `
üîî *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*

üí∞ *–°—É–º–º–∞*: ${formattedAmount} TON
üíº *–ö–æ—à–µ–ª–µ–∫*: \`${walletAddress}\`
‚è±Ô∏è *–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞*: ${formatDate(new Date().toISOString())}
    `;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    const inlineKeyboard = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –û–î–û–ë–†–ò–¢–¨',
            callback_data: `approve_${orderNumber}`
          },
          {
            text: '‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨',
            callback_data: `reject_${orderNumber}`
          }
        ]
      ]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.sendMessage(adminChatId as string, message, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: inlineKeyboard
    });

    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–≤–æ–¥–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram:', error);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
 */
export async function sendWithdrawalStatusNotification(
  chatId: string,
  status: string,
  amount: number,
  orderNumber: string
): Promise<boolean> {
  try {
    console.log(`[TelegramNotifier] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. chatId: "${chatId}", —Ç–∏–ø: ${typeof chatId}`);
    
    if (!bot) {
      console.error('[TelegramNotifier] –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞');
      return false;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
    const formattedAmount = formatTonAmount(amount);
    console.log(`[TelegramNotifier] –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ${formattedAmount} TON`);

    let messageText = '';
    if (status === 'completed') {
      messageText = `‚úÖ –í–∞—à –≤—ã–≤–æ–¥ ${formattedAmount} TON —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${orderNumber}`;
    } else if (status === 'rejected') {
      messageText = `‚ùå –í–∞—à –≤—ã–≤–æ–¥ ${formattedAmount} TON –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${orderNumber}`;
    } else {
      messageText = `‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –≤—ã–≤–æ–¥–∞ ${formattedAmount} TON –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}\n\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${orderNumber}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.log(`[TelegramNotifier] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chatId –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    const chatIdStr = String(chatId);
    console.log(`[TelegramNotifier] chatId –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: "${chatIdStr}"`);
    
    await bot.sendMessage(chatIdStr, messageText, {
      parse_mode: 'Markdown'
    });

    console.log(`[TelegramNotifier] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞ (${status}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatIdStr}`);
    return true;
  } catch (error) {
    console.error('[TelegramNotifier] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram:', error);
    return false;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ Telegram
 */
export async function handleTelegramCallback(callbackQuery: TelegramBot.CallbackQuery): Promise<boolean> {
  if (!bot) {
    console.error('[TelegramNotifier] Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return false;
  }

  try {
    const { data, message, id } = callbackQuery;
    
    if (!data || !message) {
      console.error('[TelegramNotifier] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞');
      return false;
    }
    
    console.log('[TelegramNotifier] –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫ –æ—Ç Telegram:', data);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞: approve_ID –∏–ª–∏ reject_ID
    const [action, requestId] = data.split('_');
    
    if (!action || !requestId || (action !== 'approve' && action !== 'reject')) {
      console.error('[TelegramNotifier] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞:', data);
      return false;
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –¥–ª—è Telegram
    await bot.answerCallbackQuery(id, {
      text: action === 'approve' ? '–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω' : '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω',
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const statusEmoji = action === 'approve' ? '‚úÖ' : '‚ùå';
    const statusText = action === 'approve' ? '–û–î–û–ë–†–ï–ù' : '–û–¢–ö–õ–û–ù–ï–ù';
    
    await bot.editMessageText(
      `${message.text}\n\n${statusEmoji} –ó–∞–ø—Ä–æ—Å ${statusText}`,
      {
        chat_id: message.chat.id,
        message_id: message.message_id,
        parse_mode: 'HTML'
      }
    );
    
    // –ù–û–í–û–ï: –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
    console.log('[TelegramNotifier] –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞:', {
      requestId,
      status: action
    });
    
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
      const baseUrl = process.env.API_BASE_URL || process.env.NEXT_PUBLIC_APP_URL || 'https://tonot-chance.vercel.app';
      const url = new URL('/api/withdraw-approve', baseUrl);
      
      console.log(`[TelegramNotifier] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: ${url.toString()}`);
      
      const response = await fetch(url.toString(), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          requestId,
          status: action
        }),
      });
      
      const result = await response.json();
      console.log('[TelegramNotifier] –†–µ–∑—É–ª—å—Ç–∞—Ç API –≤—ã–∑–æ–≤–∞:', result);
      
      if (!result.success) {
        console.error('[TelegramNotifier] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞:', result.error);
      }
    } catch (apiError) {
      console.error('[TelegramNotifier] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:', apiError);
    }
    
    return true;
  } catch (error) {
    console.error('[TelegramNotifier] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞ Telegram:', error);
    return false;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
 */
export async function updateAdminRequestMessage(
  chatId: string | number,
  messageId: number,
  originalText: string,
  status: 'completed' | 'rejected',
  error?: string
): Promise<boolean> {
  if (!bot) {
    console.error('[TelegramNotifier] Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return false;
  }

  try {
    let statusEmoji = status === 'completed' ? '‚úÖ' : '‚ùå';
    let statusText = status === 'completed' ? '–û–î–û–ë–†–ï–ù' : '–û–¢–ö–õ–û–ù–ï–ù';
    
    let newText = `${originalText}\n\n${statusEmoji} –ó–∞–ø—Ä–æ—Å ${statusText}`;
    
    if (error) {
      newText += `\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error}`;
    }
    
    await bot.editMessageText(newText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'HTML'
    });
    
    console.log(`[TelegramNotifier] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å=${status}, chatId=${chatId}`);
    return true;
  } catch (error: any) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ)
    if (error.message && error.message.includes('message is not modified')) {
      console.log('[TelegramNotifier] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ');
      return true;
    }
    
    console.error('[TelegramNotifier] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    return false;
  }
}

// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
interface TelegramNotifier {
  sendMessageToAdmin: (message: string, buttons?: Array<Array<{ text: string, callback_data: string }>>) => Promise<boolean>;
  sendWithdrawalRequestNotification: (amount: number, address: string, orderNumber: string) => Promise<boolean>;
  sendWithdrawalStatusNotification: (chatId: string, status: string, amount: number, orderNumber: string) => Promise<boolean>;
  handleTelegramCallback: (callbackQuery: TelegramBot.CallbackQuery) => Promise<boolean>;
  updateAdminRequestMessage: (chatId: string | number, messageId: number, originalText: string, status: 'completed' | 'rejected', error?: string) => Promise<boolean>;
  isConfigured: boolean;
  bot: TelegramBot | null;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
const telegramNotifier: TelegramNotifier = {
  sendMessageToAdmin,
  sendWithdrawalRequestNotification,
  sendWithdrawalStatusNotification,
  handleTelegramCallback,
  updateAdminRequestMessage,
  isConfigured: isBotConfigured,
  bot
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
export default telegramNotifier; 