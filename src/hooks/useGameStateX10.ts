import { useCallback, useEffect, useRef, useState } from 'react';
import { useUser } from '@/contexts/UserContext';
import { useTelegramUser } from '@/hooks/useTelegramUser';
import { useStorage, STORAGE_KEYS } from '@/hooks/useStorage';
import { GamePhase, GAME_TIMINGS } from '@/contexts/X10RoomContext';
import { X10Player, X10Winner } from '@/@types/x10';

export type GameStatusX10 = 'idle' | 'waiting' | 'playing' | 'completed';

export interface X10Match {
  matchId: string;
  players: X10Player[];
  winners?: X10Winner[];
  createdAt?: string;
  status: string;
}

export interface JoinRoomParams {
  matchId: string;
  telegramId: number;
  username: string;
}

export interface GameStateX10 {
  phase: GamePhase;
  matchId: string | null;
  players: X10Player[];
  winners: X10Winner[];
  waitingStartTime: number | null;
  animationStartTime: number | null;
}

export interface UseGameStateX10ReturnType {
  gameState: GameStateX10;
  isWaiting: boolean;
  findPlayers: (tickets: number) => Promise<void>;
  cancelWaiting: () => Promise<void>;
  updateGameState: (state: Partial<GameStateX10>) => void;
  resetGame: () => void;
  completeGame: (matchId: string) => Promise<void>;
  error: string | null;
  isLoading: boolean;
  timings: typeof GAME_TIMINGS;
  handleSocketEvents: (telegramId?: number) => void;
  updateUserBalance: () => Promise<any>;
}

const initialGameState: GameStateX10 = {
  phase: 'idle',
  matchId: null,
  players: [],
  winners: [],
  waitingStartTime: null,
  animationStartTime: null
};

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã X10
 * @param joinX10Room - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –º–∞—Ç—á–∞
 * @returns –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π X10
 */
export function useGameStateX10(
  joinX10Room?: (data: JoinRoomParams) => Promise<void>
): UseGameStateX10ReturnType {
  const { user } = useUser();
  const { telegramUser } = useTelegramUser();
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ localStorage
  const { 
    value: savedGameState, 
    setValue: setSavedGameState 
  } = useStorage<GameStateX10>(STORAGE_KEYS.GAME_STATE_X10);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  const [gameState, setGameState] = useState<GameStateX10>(() => {
    console.log('[useGameStateX10] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', savedGameState);
    // –ï—Å–ª–∏ –±—ã–ª –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return savedGameState?.phase === 'waiting' ? initialGameState : savedGameState || initialGameState;
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isWaiting –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  const isWaiting = gameState.phase === 'waiting';
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  const updateGameState = useCallback((newState: Partial<GameStateX10>) => {
    setGameState(prev => {
      const updated = { ...prev, ...newState };
      setSavedGameState(updated);
      return updated;
    });
  }, [setSavedGameState]);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  const updateUserBalance = useCallback(async () => {
    if (!telegramUser?.id) return;
    
    const maxRetries = 3;
    let currentTry = 0;
    
    const tryUpdateBalance = async (): Promise<any> => {
      try {
        console.log(`[useGameStateX10] –ü–æ–ø—ã—Ç–∫–∞ ${currentTry + 1}/${maxRetries} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è:`, telegramUser.id);
        const response = await fetch(`/api/user-data?telegramId=${telegramUser.id}&_cache=${Date.now()}`);
        
        if (response.ok) {
          const data = await response.json();
          if (data.success && data.data) {
            console.log('[useGameStateX10] ‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', data.data);
            return data.data;
          }
        }
        throw new Error('Failed to update balance');
      } catch (error) {
        console.error(`[useGameStateX10] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${currentTry + 1}):`, error);
        
        if (currentTry < maxRetries - 1) {
          currentTry++;
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
          const delay = Math.min(1000 * Math.pow(2, currentTry), 5000);
          await new Promise(resolve => setTimeout(resolve, delay));
          return tryUpdateBalance();
        }
        throw error;
      }
    };
    
    return tryUpdateBalance();
  }, [telegramUser?.id]);
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –º–∞—Ç—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
  const joinMatchRoom = useCallback(async (matchId: string) => {
    if (!telegramUser?.id || !telegramUser?.username) {
      console.error('[useGameStateX10] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
      return;
    }
    
    try {
      console.log('[useGameStateX10] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', matchId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
      if (joinX10Room) {
        await joinX10Room({
          matchId,
          telegramId: telegramUser.id,
          username: telegramUser.username
        });
        console.log('[useGameStateX10] –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ:', matchId);
      } else {
        console.warn('[useGameStateX10] –§—É–Ω–∫—Ü–∏—è joinX10Room –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞');
      }
    } catch (error) {
      console.error('[useGameStateX10] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
    }
  }, [telegramUser?.id, telegramUser?.username, joinX10Room]);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const checkActiveMatch = async () => {
      if (!telegramUser?.id) return;
      
      // –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –∏–≥—Ä–µ, –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
      if (gameState.phase !== 'idle') return;
      
      try {
        console.log('[X10] üöÄ –ü–†–û–í–ï–†–ö–ê: –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        const response = await fetch(`/api/match/x10/game?telegramId=${telegramUser.id}`);
        
        if (response.ok) {
          const responseData = await response.json();
          console.log('[X10] üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', responseData);
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–∞—Ç—á–µ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞
          if (responseData.success && responseData.data && responseData.data.status === 'in_match') {
            console.log('[X10] üéÆ –ù–ê–ô–î–ï–ù–û: –ê–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', responseData.data);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            updateGameState({
              phase: 'preparing', // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ñ–∞–∑—ã
              matchId: responseData.data.matchId,
              players: responseData.data.players || [],
              animationStartTime: Date.now() // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            });
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –º–∞—Ç—á–∞
            await joinMatchRoom(responseData.data.matchId);
            
            console.log('[X10] üîå –£–°–ü–ï–•: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', responseData.data.matchId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await updateUserBalance();
          } else {
            console.log('[X10] ‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }
        }
      } catch (error) {
        console.error('[X10] ‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞:', error);
      }
    };
    
    checkActiveMatch();
  }, [telegramUser?.id, gameState.phase, updateGameState, joinMatchRoom, updateUserBalance]);
  
  // –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ - –≤—ã–∑–æ–≤ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞
  const findPlayers = useCallback(async (tickets: number) => {
    if (!telegramUser?.id || !telegramUser?.username) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
      return;
    }
    
    try {
      setIsLoading(true);
      console.log('[useGameStateX10] –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser.id);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ "waiting"
      updateGameState({ 
        phase: 'waiting',
        waitingStartTime: Date.now() 
      });
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á —á–µ—Ä–µ–∑ API
      const response = await fetch('/api/match/x10/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramId: telegramUser.id,
          username: telegramUser.username,
          tickets: tickets
        }),
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞: ${response.status}`);
      }

      const data = await response.json();
      console.log('[useGameStateX10] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞:', data);
      
      if (data.success && data.matchId) {
        console.log('[useGameStateX10] –ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', data.matchId);
        
        // –ï—Å–ª–∏ –º–∞—Ç—á —Å—Ä–∞–∑—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (data.status === 'playing') {
          console.log('[useGameStateX10] –ú–∞—Ç—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∏–º–∞—Ü–∏–∏');
          
          updateGameState({
            phase: 'preparing',
            matchId: data.matchId,
            players: data.players || [],
            animationStartTime: Date.now()
          });
          
          // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
          await joinMatchRoom(data.matchId);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await updateUserBalance();
        } else {
          // –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º ID –º–∞—Ç—á–∞ –∏ –æ—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
          console.log('[useGameStateX10] –ú–∞—Ç—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è');
          updateGameState({
            matchId: data.matchId,
            players: data.players || [],
          });
        }
      } else if (data.error) {
        throw new Error(data.error);
      }
    } catch (error) {
      console.error('[useGameStateX10] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤:', error);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤: ${error instanceof Error ? error.message : String(error)}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      updateGameState(initialGameState);
    } finally {
      setIsLoading(false);
    }
  }, [telegramUser, updateGameState, joinMatchRoom, updateUserBalance]);
  
  // –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è
  const cancelWaiting = useCallback(async () => {
    if (!telegramUser?.id) {
      console.error('[useGameStateX10] –ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã');
      return;
    }

    try {
      setIsLoading(true);
      console.log('[useGameStateX10] –û—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser.id);
      
      const response = await fetch('/api/match/x10/cancel', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramId: telegramUser.id,
        }),
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞: ${response.status}`);
      }

      const data = await response.json();
      console.log('[useGameStateX10] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞:', data);
      
      if (data.success) {
        updateGameState(initialGameState);
        localStorage.removeItem(STORAGE_KEYS.GAME_STATE_X10);
      }
    } catch (error) {
      console.error('[useGameStateX10] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞:', error);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsLoading(false);
    }
  }, [telegramUser, updateGameState]);
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  const resetGame = useCallback(() => {
    console.log('[useGameStateX10] –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã');
    console.log('[useGameStateX10] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', gameState);
    
    updateGameState(initialGameState);
    setError(null);
    
    console.log('[useGameStateX10] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ');
  }, [updateGameState, gameState]);
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞
  const completeGame = useCallback(async (matchId: string) => {
    if (!telegramUser?.id) {
      console.error('[useGameStateX10] ‚ùå –ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
      return;
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    if (gameState.phase === 'result') {
      console.log('[useGameStateX10] ‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –≤ —Ñ–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      return;
    }

    try {
      console.log('[useGameStateX10] üéÆ –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É:', matchId);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);

      const response = await fetch('/api/match/x10/complete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          matchId,
          telegramId: telegramUser.id
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        const winners = Array.isArray(data.winners) ? data.winners : [];
        console.log('[useGameStateX10] üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:', winners);
        
        // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        updateGameState({
          phase: 'result',
          winners: winners
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ–¥–∏–Ω —Ä–∞–∑
        try {
          await updateUserBalance();
          console.log('[useGameStateX10] ‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
          console.error('[useGameStateX10] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        }

        return;
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
    } catch (error) {
      console.error(`[useGameStateX10] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:`, error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      updateGameState({
        phase: 'result',
        winners: []
      });

      // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
      updateUserBalance().catch(console.error);
    }
  }, [telegramUser?.id, updateGameState, updateUserBalance, gameState.phase]);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞ (–µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è)
  useEffect(() => {
    let intervalId: NodeJS.Timeout;
    
    if (isWaiting && telegramUser?.id) {
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
      const checkMatchStatus = async () => {
        try {
          console.log('[useGameStateX10] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser.id);
          
          const response = await fetch(`/api/match/x10/game?telegramId=${telegramUser.id}`);
          
          if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('[useGameStateX10] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', data);
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
          if (data.success && data.data && data.data.status === 'in_match') {
            console.log('[X10] üéÆ –ú–ê–¢–ß –ù–ê–ô–î–ï–ù: –ê–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á —Å ID:', data.data.matchId);
            
            updateGameState({
              phase: 'preparing',
              matchId: data.data.matchId,
              players: data.data.players || [],
              animationStartTime: Date.now()
            });
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –º–∞—Ç—á–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
            if (data.data.matchId && gameState.matchId !== data.data.matchId) {
              await joinMatchRoom(data.data.matchId);
              console.log('[X10] üîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï: –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –º–∞—Ç—á–∞');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await updateUserBalance();
          }
        } catch (error) {
          console.error('[useGameStateX10] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞:', error);
        }
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
      checkMatchStatus();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log('[useGameStateX10] –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã');
      intervalId = setInterval(checkMatchStatus, 3000); // –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    }
    
    return () => {
      if (intervalId) {
        console.log('[useGameStateX10] –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
        clearInterval(intervalId);
      }
    };
  }, [isWaiting, telegramUser?.id, gameState.matchId, updateGameState, joinMatchRoom, updateUserBalance]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–∑–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–π–º–∏–Ω–≥–æ–≤
  useEffect(() => {
    if (!gameState.animationStartTime || 
        gameState.phase === 'idle' || 
        gameState.phase === 'waiting' || 
        gameState.phase === 'completed') {
      return;
    }
    
    console.log(`[useGameStateX10] üìä –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: ${gameState.phase}`);
    
    let nextPhase: GamePhase | null = null;
    let timeoutDuration = 0;
    
    switch (gameState.phase) {
      case 'preparing':
        nextPhase = 'merging';
        timeoutDuration = GAME_TIMINGS.PREPARING;
        break;
      case 'merging':
        nextPhase = 'wheel_appear';
        timeoutDuration = GAME_TIMINGS.MERGING;
        break;
      case 'wheel_appear':
        nextPhase = 'wheel_spin';
        timeoutDuration = GAME_TIMINGS.WHEEL_APPEAR;
        break;
      case 'wheel_spin':
        nextPhase = 'wheel_disappear';
        timeoutDuration = GAME_TIMINGS.WHEEL_SPIN;
        break;
      case 'wheel_disappear':
        if (gameState.matchId) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∞–π–º–∏–Ω–≥–∞
          timeoutDuration = GAME_TIMINGS.WHEEL_DISAPPEAR + GAME_TIMINGS.RESULT_DELAY; // 2000 + 1000 = 3000–º—Å
          const timer = setTimeout(() => {
            console.log(`[useGameStateX10] üèÅ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞: ${gameState.matchId}`);
            completeGame(gameState.matchId!);
          }, timeoutDuration);
          
          return () => clearTimeout(timer);
        }
        break;
      case 'result':
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ completed
        // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        break;
    }
    
    // –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ñ–∞–∑–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (nextPhase) {
      console.log(`[useGameStateX10] ‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ ${timeoutDuration}ms –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ ${nextPhase}`);
      
      // –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
      const elapsedSincePhaseStart = Date.now() - gameState.animationStartTime;
      
      // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É
      if (elapsedSincePhaseStart >= timeoutDuration) {
        console.log(`[useGameStateX10] ‚ö° –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ ${nextPhase} (–ø—Ä–æ—à–ª–æ ${elapsedSincePhaseStart}ms)`);
        updateGameState({ 
          phase: nextPhase,
          animationStartTime: Date.now()
        });
        return;
      }
      
      // –ò–Ω–∞—á–µ –∂–¥–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
      const remainingTime = Math.max(0, timeoutDuration - elapsedSincePhaseStart);
      console.log(`[useGameStateX10] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${remainingTime}ms –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ ${nextPhase}`);
      
      const phaseTimer = setTimeout(() => {
        console.log(`[useGameStateX10] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ: ${nextPhase}`);
        updateGameState({ 
          phase: nextPhase!,
          animationStartTime: Date.now()
        });
      }, remainingTime);
      
      return () => clearTimeout(phaseTimer);
    }
    
  }, [gameState.phase, gameState.matchId, gameState.animationStartTime, updateGameState, completeGame]);

  // –ú–µ—Ö–∞–Ω–∏–∑–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
  useEffect(() => {
    if (!error) return;
    
    console.log('[useGameStateX10] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:', error);
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∏ –º—ã –Ω–µ –≤ –∫–æ–Ω–µ—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if ((error.includes('504') || error.includes('timeout')) && 
        gameState.phase !== 'idle' && 
        gameState.phase !== 'completed') {
      
      console.log('[useGameStateX10] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞, –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      const recoveryTimer = setTimeout(() => {
        console.log('[useGameStateX10] üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞');
        
        // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        updateGameState({
          phase: 'completed',
          winners: []
        });
        
        // –ó–∞—Ç–µ–º —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setTimeout(() => {
          resetGame();
          console.log('[useGameStateX10] ‚úÖ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞');
        }, 2000);
      }, 10000); // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      
      return () => clearTimeout(recoveryTimer);
    }
  }, [error, gameState.phase, updateGameState, resetGame]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
  const handleSocketEvents = useCallback((telegramId?: number) => {
    if (!telegramId) {
      console.warn('[useGameStateX10] ‚ö†Ô∏è –ù–µ—Ç telegramId –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∫–µ—Ç-—Å–æ–±—ã—Ç–∏–π');
      return;
    }
    
    console.log('[useGameStateX10] üîå –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∫–µ—Ç-—Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
    
    // –í–ê–ñ–ù–û: –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è X10
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤–∞—à–µ–≥–æ socket-—Ö—É–∫–∞, –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è 
    // –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ª–∏–±–æ —Ç—É—Ç, –ª–∏–±–æ –≤ —Å–∞–º–æ–º socket-—Ö—É–∫–µ
    
    // –ü—Ä–∏–º–µ—Ä (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏):
    // onGamePhase((data) => {
    //   console.log('[useGameStateX10] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ gamePhase:', data);
    //   
    //   if (data && data.phase) {
    //     updateGameState({
    //       phase: data.phase,
    //       ...(data.winners ? { winners: data.winners } : {})
    //     });
    //   }
    // });
    
    // –¢–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Ö—É–∫, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º
    console.log('[useGameStateX10] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∫–µ—Ç-—Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }, []);

  return {
    gameState,
    isWaiting,
    findPlayers,
    cancelWaiting,
    updateGameState,
    resetGame,
    completeGame,
    error,
    isLoading,
    timings: GAME_TIMINGS,
    handleSocketEvents,
    updateUserBalance
  };
} 