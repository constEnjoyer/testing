import { useCallback, useEffect, useRef, useState } from 'react';
import { io, Socket } from 'socket.io-client';
import type { ClientToServerEvents, ServerToClientEvents } from '@/@types/x10Socket';
import { X10Player, X10Winner } from '@/@types/x10';
import { SOCKET_CONFIG } from '@/lib/config';
import { useTelegramUser } from '@/hooks/useTelegramUser';
import { GamePhase } from '@/contexts/X10RoomContext';

interface JoinRoomData {
  matchId: string;
  telegramId: number;
  username: string;
}

interface GamePhaseData {
  matchId: string;
  phase: GamePhase;
  players?: X10Player[];
  winners?: X10Winner[];
}

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const MAX_RECONNECT_ATTEMPTS = 3;
// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ ms (–Ω–∞—á–∞–ª—å–Ω–∞—è)
const INITIAL_RECONNECT_DELAY = 1000;

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º X10
 * @param autoConnect - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true –¥–ª—è X10)
 */
export const useSocketX10 = (autoConnect: boolean = true) => {
  const [isConnected, setIsConnected] = useState(false);
  const [lastError, setLastError] = useState<string | null>(null);
  const socketRef = useRef<Socket<ServerToClientEvents, ClientToServerEvents> | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const reconnectTimerRef = useRef<NodeJS.Timeout | null>(null);
  const { telegramUser } = useTelegramUser();

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const clearReconnectTimer = useCallback(() => {
    if (reconnectTimerRef.current) {
      clearTimeout(reconnectTimerRef.current);
      reconnectTimerRef.current = null;
    }
  }, []);

  const connect = useCallback(async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (socketRef.current?.connected) {
      console.log('[X10Socket] üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      setIsConnected(true);
      return;
    }

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!socketRef.current) {
        socketRef.current = io({
          transports: ['websocket', 'polling'],
          query: { gameType: 'x10' }
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        socketRef.current.on('connect', () => {
          console.log('[X10Socket] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
          setIsConnected(true);
          reconnectAttemptsRef.current = 0;
        });

        socketRef.current.on('disconnect', () => {
          console.log('[X10Socket] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ');
          setIsConnected(false);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ heartbeat
        socketRef.current.on('heartbeat', () => {
          socketRef.current?.emit('heartbeat_ack');
        });
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (!socketRef.current.connected) {
        socketRef.current.connect();
      }
    } catch (error) {
      console.error('[X10Socket] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –º–∞—Ç—á–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const joinX10Room = useCallback(async (data: JoinRoomData) => {
    console.log(`[X10Socket] üö™ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ: ${data.matchId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (socketRef.current) {
      // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (socketRef.current.connected) {
        console.log('[X10Socket] ‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É');
      } 
      // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø–æ–¥–∫–ª—é—á–∞–µ–º
      else {
        console.log('[X10Socket] üîÑ –°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
        try {
          await connect();
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
          console.error('[X10Socket] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–æ–∫–µ—Ç:', error);
          throw error;
        }
      }
    } 
    // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º
    else {
      console.log('[X10Socket] üîå –°–æ–∫–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
      try {
        await connect();
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        console.error('[X10Socket] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç:', error);
        throw error;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
    if (!socketRef.current?.connected) {
      console.error('[X10Socket] ‚ö†Ô∏è –°–æ–∫–µ—Ç –≤—Å—ë –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫!');
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      try {
        console.log('[X10Socket] üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞...');
        await connect();
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (retryError) {
        console.error('[X10Socket] ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', retryError);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–æ–∫–µ—Ç—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∫–æ–º–Ω–∞—Ç—É');
      }
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    return new Promise<void>((resolve, reject) => {
      // –î–≤–æ–π–Ω–æ–π —Ç–∞–π–º–∞—É—Ç: –æ–¥–∏–Ω –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, –≤—Ç–æ—Ä–æ–π –¥–ª—è –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const responseTimeoutId = setTimeout(() => {
        console.error('[X10Socket] ‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'));
      }, 10000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 5000 –¥–æ 10000 –º—Å
      
      // –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
      const operationTimeoutId = setTimeout(() => {
        console.error('[X10Socket] ‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        clearTimeout(responseTimeoutId);
        
        // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–æ–∫–µ—Ç—É (–∫—Ä–∞–π–Ω—è—è –º–µ—Ä–∞)
        if (socketRef.current) {
          console.log('[X10Socket] üîÑ –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–æ–∫–µ—Ç—É...');
          socketRef.current.disconnect();
          setTimeout(() => socketRef.current?.connect(), 500);
        }
        
        reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
      }, 15000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 10000 –¥–æ 15000 –º—Å
      
      try {
        console.log('[X10Socket] üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', data.matchId);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–∫–µ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if (!socketRef.current) {
          clearTimeout(responseTimeoutId);
          clearTimeout(operationTimeoutId);
          reject(new Error('–°–æ–∫–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞'));
          return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è emit –º–µ—Ç–æ–¥–∞
        if (typeof socketRef.current.emit !== 'function') {
          clearTimeout(responseTimeoutId);
          clearTimeout(operationTimeoutId);
          reject(new Error('–ú–µ—Ç–æ–¥ emit –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ —Å–æ–∫–µ—Ç–∞'));
          return;
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        socketRef.current.emit('joinX10Room', data, (response) => {
          // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
          clearTimeout(responseTimeoutId);
          clearTimeout(operationTimeoutId);
          
          if (response && response.success) {
            console.log('[X10] ‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï: –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –º–∞—Ç—á–∞');
            resolve();
          } else {
            const errorMsg = response && response.error ? response.error : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ';
            console.error('[X10Socket] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', errorMsg);
            reject(new Error(errorMsg));
          }
        });
      } catch (error) {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        clearTimeout(responseTimeoutId);
        clearTimeout(operationTimeoutId);
        console.error('[X10Socket] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        reject(error);
      }
    });
  }, [connect]);

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤
  const disconnect = useCallback(() => {
    clearReconnectTimer(); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    if (socketRef.current) {
      console.log('[X10Socket] üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–æ–∫–µ—Ç–∞');
      socketRef.current.disconnect();
      socketRef.current = null;
      setIsConnected(false);
    }
  }, [clearReconnectTimer]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const onGameStarted = useCallback((callback: (data: any) => void) => {
    if (!socketRef.current) {
      console.warn('[X10Socket] ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å gameStarted: —Å–æ–∫–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return () => {};
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–ª–ª–±—ç–∫–µ
    const safeCallback = (data: any) => {
      try {
        console.log('[X10Socket] üéÆ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ gameStarted:', data);
        callback(data);
      } catch (error) {
        console.error('[X10Socket] ‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ gameStarted:', error);
      }
    };
    
    console.log('[X10Socket] üëÇ –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å gameStarted');
    socketRef.current.on('gameStarted', safeCallback);
    
    return () => {
      console.log('[X10Socket] üîï –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å gameStarted');
      socketRef.current?.off('gameStarted', safeCallback);
    };
  }, []);

  const onGamePhase = useCallback((callback: (data: any) => void) => {
    if (!socketRef.current) {
      console.warn('[X10Socket] ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å gamePhase: —Å–æ–∫–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return () => {};
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–ª–ª–±—ç–∫–µ
    const safeCallback = (data: any) => {
      try {
        console.log('[X10Socket] üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ gamePhase:', data);
        callback(data);
      } catch (error) {
        console.error('[X10Socket] ‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ gamePhase:', error);
      }
    };
    
    console.log('[X10Socket] üëÇ –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å gamePhase');
    socketRef.current.on('gamePhase', safeCallback);
    
    return () => {
      console.log('[X10Socket] üîï –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å gamePhase');
      socketRef.current?.off('gamePhase', safeCallback);
    };
  }, []);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ autoConnect = true
  useEffect(() => {
    if (autoConnect) {
      connect();
    }

    return () => {
      // –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (socketRef.current) {
        socketRef.current.off('connect');
        socketRef.current.off('disconnect');
        socketRef.current.off('heartbeat');
      }
    };
  }, [autoConnect, connect]);

  return {
    isConnected,
    lastError,
    connect,
    disconnect,
    joinX10Room,
    onGameStarted,
    onGamePhase
  };
}; 