'use client';

import { useEffect, useRef, useState, useCallback } from 'react';
import { io, Socket as SocketIOClient } from 'socket.io-client';
import { ServerToClientEvents, ClientToServerEvents } from '@/@types/socket';
import { useUser } from '@/contexts/UserContext';

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
const debug = (message: string, ...args: any[]) => {
  console.log(`[Socket] ${message}`, ...args);
};

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏–≥—Ä—ã.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
 * 
 * @param autoConnect - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @returns {UseSocketReturnType} - –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∫–µ—Ç–æ–º
 */
export function useSocket(autoConnect: boolean = true) {
  const { user } = useUser();
  const [isConnected, setIsConnected] = useState(false);
  const socketRef = useRef<SocketIOClient | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const maxReconnectAttempts = 5;

  const connect = useCallback(async () => {
    if (socketRef.current?.connected) {
      console.log('[Socket] üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return;
    }

    if (!user?.id) {
      console.error('[Socket] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    const socketUrl = window.location.origin;
    console.log('[Socket] üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', socketUrl);
    
    socketRef.current = io(socketUrl, {
      path: '/api/socket',
      transports: ['websocket'],
      query: { telegramId: user.id.toString() }
    });

    socketRef.current.on('connect', () => {
      console.log('[Socket] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
      setIsConnected(true);
      reconnectAttemptsRef.current = 0;
    });

    socketRef.current.on('disconnect', () => {
      console.log('[Socket] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ');
      setIsConnected(false);
    });

    socketRef.current.on('error', (error: string) => {
      console.error('[Socket] ‚ö†Ô∏è –û—à–∏–±–∫–∞:', error);
      setIsConnected(false);
    });
  }, [user]);

  const disconnect = useCallback(() => {
    socketRef.current?.disconnect();
    socketRef.current = null;
    setIsConnected(false);
  }, []);

  const emit = useCallback(<T extends keyof ClientToServerEvents>(
    event: T,
    ...args: Parameters<ClientToServerEvents[T]>
  ) => {
    if (!socketRef.current?.connected) return false;
    socketRef.current.emit(event, ...args);
    return true;
  }, []);

  const on = useCallback((event: string, callback: (...args: any[]) => void) => {
    if (!socketRef.current) return () => {};
    socketRef.current.on(event, callback);
    return () => socketRef.current?.off(event, callback);
  }, []);

  useEffect(() => {
    if (user?.id && autoConnect) {
      connect();
    }
    return () => {
      disconnect();
    };
  }, [connect, disconnect, user, autoConnect]);

  return {
    isConnected,
    connect,
    disconnect,
    emit,
    on,
    socket: socketRef.current
  };
} 